<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nest</name>
    </assembly>
    <members>
        <member name="M:Nest.ElasticClient.DeleteById``1(System.Int32)">
            <summary>
            Synchronously deletes a document by id in the default index and the inferred typename for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteById``1(System.String)">
            <summary>
            Synchronously deletes a document by id in the default index and the inferred typename for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteById(System.String,System.String,System.String)">
            <summary>
            Synchronously deletes a document by id in the specified index and type
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteById(System.String,System.String,System.Int32)">
            <summary>
            Synchronously deletes a document by id in the specified index and type
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteById``1(System.Int32,Nest.DeleteParameters)">
            <summary>
            Synchronously deletes a document by id in the default index and the inferred typename for T
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.DeleteById``1(System.String,Nest.DeleteParameters)">
            <summary>
            Synchronously deletes a document by id in the default index and the inferred typename for T
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.DeleteById(System.String,System.String,System.String,Nest.DeleteParameters)">
            <summary>
            Synchronously deletes a document by id in the specified index and type
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.DeleteById(System.String,System.String,System.Int32,Nest.DeleteParameters)">
            <summary>
            Synchronously deletes a document by id in the specified index and type
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.DeleteByIdAsync``1(System.Int32)">
            <summary>
            Asynchronously deletes a document by id in the default index and the inferred typename for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteByIdAsync``1(System.String)">
            <summary>
            Asynchronously deletes a document by id in the default index and the inferred typename for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteByIdAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously deletes a document by id in the specified index and type
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteByIdAsync(System.String,System.String,System.Int32)">
            <summary>
            Asynchronously deletes a document by id in the specified index and type
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteByIdAsync``1(System.Int32,Nest.DeleteParameters)">
            <summary>
            Asynchronously deletes a document by id in the default index and the inferred typename for T
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.DeleteByIdAsync``1(System.String,Nest.DeleteParameters)">
            <summary>
            Asynchronously deletes a document by id in the default index and the inferred typename for T
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.DeleteByIdAsync(System.String,System.String,System.String,Nest.DeleteParameters)">
            <summary>
            Asynchronously deletes a document by id in the specified index and type
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.DeleteByIdAsync(System.String,System.String,System.Int32,Nest.DeleteParameters)">
            <summary>
            Asynchronously deletes a document by id in the specified index and type
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.DeleteByQuery``1(System.Action{Nest.RoutingQueryPathDescriptor{``0}},Nest.DeleteByQueryParameters)">
            <summary>
            Deletes all documents that match the query
            </summary>
            <param name="query">RoutingQueryPathDescriptor also allows you to control which indices and types are affected</param>
            <param name="parameters">Control routing/consistency and replication</param>
            <returns>IDeleteResponse, check .IsValid to validate success</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteByQuery(System.Action{Nest.RoutingQueryPathDescriptor},Nest.DeleteByQueryParameters)" -->
        <member name="M:Nest.ElasticClient.DeleteByQueryRaw(System.String,Nest.DeleteByQueryParameters)">
            <summary>
            Deletes all documents that match the string query.
            </summary>
            <param name="query">RoutingQueryPathDescriptor also allows you to control which indices and types are affected</param>
            <param name="parameters">Control routing/consistency and replication</param>
            <returns>IDeleteResponse, check .IsValid to validate success</returns>
        </member>
        <member name="M:Nest.ElasticClient.DeleteByQueryAsync``1(System.Action{Nest.RoutingQueryPathDescriptor{``0}},Nest.DeleteByQueryParameters)">
            <summary>
            Deletes all documents that match the query
            </summary>
            <param name="query">RoutingQueryPathDescriptor also allows you to control which indices and types are affected</param>
            <param name="parameters">Control routing/consistency and replication</param>
            <returns>IDeleteResponse, check .IsValid to validate success</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteByQueryAsync(System.Action{Nest.RoutingQueryPathDescriptor},Nest.DeleteByQueryParameters)" -->
        <member name="M:Nest.ElasticClient.DeleteByQueryRawAsync(System.String,Nest.DeleteByQueryParameters)">
            <summary>
            Deletes all documents that match the string query.
            </summary>
            <param name="query">RoutingQueryPathDescriptor also allows you to control which indices and types are affected</param>
            <param name="parameters">Control routing/consistency and replication</param>
            <returns>IDeleteResponse, check .IsValid to validate success</returns>
        </member>
        <member name="M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Deletes all the objects by inferring its id in the default index and the inferred type for T
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}})" -->
        <member name="M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{``0},Nest.SimpleBulkParameters)">
            <summary>
            Deletes all the objects by inferring its id in the default index and the inferred type for T
            </summary>
            <param name="bulkParameters">allows you to control the replication and refresh behavior</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},Nest.SimpleBulkParameters)" -->
        <member name="M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Deletes all the objects by inferring its id in the specified index and the inferred type for T
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String)" -->
        <member name="M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{``0},System.String,Nest.SimpleBulkParameters)">
            <summary>
            Deletes all the objects by inferring its id in the specified index and the inferred type for T
            </summary>
            <param name="bulkParameters">allows you to control the replication and refresh behavior</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,Nest.SimpleBulkParameters)" -->
        <member name="M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Deletes all the objects by inferring its id in the specified index and type
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,System.String)" -->
        <member name="M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,Nest.SimpleBulkParameters)">
            <summary>
            Deletes all the objects by inferring its id in the specified index and type
            </summary>
            <param name="bulkParameters">allows you to control the replication and refresh behavior</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,System.String,Nest.SimpleBulkParameters)" -->
        <member name="M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Deletes all the objects by inferring its id in the default index and the inferred type for T
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}})" -->
        <member name="M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{``0},Nest.SimpleBulkParameters)">
            <summary>
            Deletes all the objects by inferring its id in the default index and the inferred type for T
            </summary>
            <param name="bulkParameters">allows you to control the replication and refresh behavior</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},Nest.SimpleBulkParameters)" -->
        <member name="M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Deletes all the objects by inferring its id in the specified index and the inferred type for T
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String)" -->
        <member name="M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{``0},System.String,Nest.SimpleBulkParameters)">
            <summary>
            Deletes all the objects by inferring its id in the specified index and the inferred type for T
            </summary>
            <param name="bulkParameters">allows you to control the replication and refresh behavior</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,Nest.SimpleBulkParameters)" -->
        <member name="M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Deletes all the objects by inferring its id in the specified index and type
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,System.String)" -->
        <member name="M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{``0},System.String,Nest.SimpleBulkParameters,System.String)">
            <summary>
            Deletes all the objects by inferring its id in the specified index and type
            </summary>
            <param name="bulkParameters">allows you to control the replication and refresh behavior</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,Nest.SimpleBulkParameters,System.String)" -->
        <member name="M:Nest.ElasticClient.CreateIndex(System.String,Nest.IndexSettings)">
            <summary>
            Create an index with the specified index settings
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.CreateIndex(System.String,System.Func{Nest.CreateIndexDescriptor,Nest.CreateIndexDescriptor})">
            <summary>
            Create an index with the specified index settings
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Health(Nest.HealthLevel)">
            <summary>
            Gets the health status of the cluster, at the specified level.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.ElasticClient.Health(System.Collections.Generic.IEnumerable{System.String},Nest.HealthLevel)">
            <summary>
            Gets the health status of the cluster, at the specified level, for the specified indexes.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.ElasticClient.Health(Nest.HealthParams)">
            <summary>
            Gets the health status of the cluster according to the healthparams passed.
            </summary>
            <param name="healthParams"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.ElasticClient.Health(System.Collections.Generic.IEnumerable{System.String},Nest.HealthParams)">
            <summary>
            Gets the health status of the cluster according to the healthparams passed, for the specified indexes.
            </summary>
            <param name="healthParams"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.ElasticClient.MoreLikeThis``1(System.Func{Nest.MoreLikeThisDescriptor{``0},Nest.MoreLikeThisDescriptor{``0}})">
            <summary>
            Search using T as the return type
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.GetMapping``1">
            <summary>
            Get the current mapping for T at the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.GetMapping``1(System.String)">
            <summary>
            Get the current mapping for T at the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.GetMapping(System.Type)">
            <summary>
            Get the current mapping for T at the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.GetMapping(System.Type,System.String)">
            <summary>
            Get the current mapping for T at the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.GetMapping(System.String,System.String)">
            <summary>
            Get the current mapping for type at the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteMapping``1">
            <summary>
            Deletes the mapping for the inferred type name of T under the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteMapping``1(System.String)">
            <summary>
            Deletes the mapping for the inferred type name of T under the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteMapping``1(System.String,System.String)">
            <summary>
            Deletes the mapping for the specified type name under the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteMapping(System.Type)">
            <summary>
            Deletes the mapping for the inferred type name of T under the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteMapping(System.Type,System.String)">
            <summary>
            Deletes the mapping for the inferred type name of T under the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteMapping(System.Type,System.String,System.String)">
            <summary>
            Deletes the mapping for the specified type name under the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.GetFull``1(System.Int32)">
            <summary>
            Gets a document of T by id in the default index and the inferred typename for T
            </summary>
            <returns>an instance of T</returns>
        </member>
        <member name="M:Nest.ElasticClient.GetFull``1(System.String)">
            <summary>
            Gets a document of T by id in the default index and the inferred typename for T
            </summary>
            <returns>an instance of T</returns>
        </member>
        <member name="M:Nest.ElasticClient.GetFull``1(System.String,System.String,System.String)">
            <summary>
            Gets a document of T by id in the specified index and the specified typename
            </summary>
            <returns>an instance of T</returns>
        </member>
        <member name="M:Nest.ElasticClient.GetFull``1(System.String,System.String,System.Int32)">
            <summary>
            Gets a document of T by id in the specified index and the specified typename
            </summary>
            <returns>an instance of T</returns>
        </member>
        <member name="M:Nest.ElasticClient.MultiGet``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets multiple documents of T by id in the default index and the inferred typename for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.MultiGet``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets multiple documents of T by id in the specified index and the specified typename for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.MultiGet``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets multiple documents of T by id in the specified index and the specified typename for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.NodeInfo(Nest.NodesInfo)">
            <summary>
            Gets the health status of the cluster.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.NodeInfo(System.Collections.Generic.IEnumerable{System.String},Nest.NodesInfo)">
            <summary>
            Gets the health status of the cluster, for the specified nodes.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.NodeStats(Nest.NodeInfoStats)">
            <summary>
            Gets the health status of each node in the cluster, for the specified indexes.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.NodeStats(System.Collections.Generic.IEnumerable{System.String},Nest.NodeInfoStats)">
            <summary>
            Gets the health status of each node in the cluster, for the specified indexes.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Scroll(System.String,System.String)">
            <summary>
            Scrolling search, ideal for scrolling on the server as it allows to keep a query open on the serverside.
            Please consult the docs http://www.elasticsearch.org/guide/reference/api/search/scroll.html
            on the do's and don'ts!
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.ValidateRaw(System.String)">
            <summary>
            The validate API allows a user to validate a potentially expensive query without executing it. 
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Validate(System.Action{Nest.ValidateQueryPathDescriptor})">
            <summary>
            The validate API allows a user to validate a potentially expensive query without executing it. 
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Validate``1(System.Action{Nest.ValidateQueryPathDescriptor{``0}})">
            <summary>
            The validate API allows a user to validate a potentially expensive query without executing it. 
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Serialize(System.Object)">
            <summary>
            serialize an object using the internal registered converters without camelcasing properties as is done 
            while indexing objects
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.SerializeCamelCase(System.Object)">
            <summary>
            Serialize an object using the default camelCasing used while indexing objects
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Deserialize``1(System.String,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <summary>
            Deserialize an object 
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.RegisterPercolator(System.String,System.Action{Nest.QueryPathDescriptor{System.Object}})">
            <summary>
            Register a percolator
            </summary>
            <param name="name">Name of the percolator</param>
            <param name="querySelector">Path and query descriptor using dynamics to describe the query</param>
        </member>
        <member name="M:Nest.ElasticClient.RegisterPercolator``1(System.String,System.Action{Nest.QueryPathDescriptor{``0}})">
            <summary>
            Register a percolator
            </summary>
            <param name="name">Name of the percolator</param>
            <param name="querySelector">Path and query descriptor using T to describe the query</param>
        </member>
        <member name="M:Nest.ElasticClient.UnregisterPercolator``1(System.String)">
            <summary>
            Unregister a percolator, on the default index.
            </summary>
            <param name="name">Name of the percolator</param>
        </member>
        <member name="M:Nest.ElasticClient.UnregisterPercolator(System.String,System.String)">
            <summary>
            Unregister a percolator
            </summary>
            <param name="name">Name of the percolator</param>
        </member>
        <member name="M:Nest.ElasticClient.Percolate``1(``0)">
            <summary>
            Manually percolate an object using its inferred typename and the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Percolate``1(System.String,``0)">
            <summary>
            Manually percolate an object using its inferred typename and the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Percolate``1(System.String,System.String,``0)">
            <summary>
            Manually percolate an object using the specified typename and the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Segments">
            <summary>
            Get segment information for all the indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Segments(System.String)">
            <summary>
            Get the segment information for the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Segments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get the segment information for the specified indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexExists(System.String)">
            <summary>
            Check if the index already exists
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Stats">
            <summary>
            Gets all the stats for all the indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Stats(Nest.StatsParams)">
            <summary>
            Gets only the specified stats for all the indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Stats(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all the stats for the specified indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Stats(System.String)">
            <summary>
            Gets all the stats for the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Stats(System.Collections.Generic.IEnumerable{System.String},Nest.StatsParams)">
            <summary>
            Gets the specified stats for the specified indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.GetIndexSettings">
            <summary>
            Gets the index settings for the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.GetIndexSettings(System.String)">
            <summary>
            Gets the index settings for the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.UpdateSettings(Nest.IndexSettings)">
            <summary>
            Update the index settings for the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.UpdateSettings(System.String,Nest.IndexSettings)">
            <summary>
            Update the index settings for the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteIndex``1">
            <summary>
            Delete the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteIndex(System.String)">
            <summary>
            Delete the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.ClearCache">
            <summary>
            Clears all caches of all indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.ClearCache``1">
            <summary>
            Clears the entire cache for the default index set in the client settings
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.ClearCache``1(Nest.ClearCacheOptions)">
            <summary>
            Clears the specified caches for the default index set in the client settings
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.ClearCache(Nest.ClearCacheOptions)">
            <summary>
            Clears the specified caches for all indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.ClearCache(System.Collections.Generic.IEnumerable{System.String},Nest.ClearCacheOptions)">
            <summary>
            Clears the specified caches for only the indices passed under indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Analyze(System.String)">
            <summary>
            Performs the standard analysis process on a text and return the tokens breakdown of the text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.ElasticClient.Analyze(Nest.AnalyzeParams,System.String)">
            <summary>
            Analyzes specified text according to the analyzeparams passed.
            </summary>
            <returns>AnalyzeResponse contains a breakdown of the token under .Tokens</returns>
        </member>
        <member name="M:Nest.ElasticClient.Analyze``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Analyzes text according to the current analyzer of the field in the default index set in the clientsettings.
            </summary>
            <returns>AnalyzeResponse contains a breakdown of the token under .Tokens</returns>
        </member>
        <member name="M:Nest.ElasticClient.Analyze``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.String)">
            <summary>
             Analyzes text according to the current analyzer of the field in the passed index.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.GetIndicesPointingToAlias(System.String)">
            <summary>
            Get all the indices pointing to an alias
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Swap(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Rename an old alias for index to a new alias in one operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Alias(System.String)">
            <summary>
            Add an alias to the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Alias(System.String,System.String)">
            <summary>
            Add an alias to the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Alias(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add multiple aliases to the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Alias(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add multiple aliases to the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.RemoveAlias(System.String)">
            <summary>
            Remove an alias for the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.RemoveAlias(System.String,System.String)">
            <summary>
            Remove an alias for the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.RemoveAlias(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove multiple alias for the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.RemoveAlias(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove multiple alias for the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Alias(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Associate multiple indices with one alias
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Rename(System.String,System.String,System.String)">
            <summary>
            Rename an old alias for index to a new alias in one operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Alias(Nest.AliasParams)">
            <summary>
            Freeform alias overload for complete control of all the aspects (does an add operation)
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Alias(System.Collections.Generic.IEnumerable{Nest.AliasParams})">
            <summary>
            Freeform multi alias overload for complete control of all the aspects (does multiple add operations)
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.RemoveAlias(Nest.AliasParams)">
            <summary>
            Freeform remove alias overload for complete control of all the aspects
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.RemoveAliases(System.Collections.Generic.IEnumerable{Nest.AliasParams})">
            <summary>
            Freeform remove multi alias overload for complete control of all the aspects
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Optimize``1">
            <summary>
            Optimize the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Optimize``1(Nest.OptimizeParams)">
            <summary>
            Optimize the default index using the specified optimize params
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Optimize(System.String)">
            <summary>
            Optimize the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Optimize(System.String,Nest.OptimizeParams)">
            <summary>
            Optimize the specified index using the specified optimize params
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Optimize">
            <summary>
            Optimize all indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Optimize(Nest.OptimizeParams)">
            <summary>
            Optimize all indices using the specified optimize params
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Optimize(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Optimize the specified indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Optimize(System.Collections.Generic.IEnumerable{System.String},Nest.OptimizeParams)">
            <summary>
            Optimize the specified indices using the specified optimize params
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Snapshot">
            <summary>
            Snapshot all indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Snapshot``1">
            <summary>
            Snapshot the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Snapshot(System.String)">
            <summary>
            Snapshot the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Snapshot(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Snapshot the specified indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Flush``1(System.Boolean)">
            <summary>
            <para>Flushes the infered typename for T under the default index </para>
            <para>The flush process of an index basically frees memory from the index by flushing data to the index storage and clearing the internal transaction log. By default, ElasticSearch uses memory heuristics in order to automatically trigger flush operations as required in order to clear memory.</para>
            </summary>
            <param name="refresh">optional, wait for the flush operation to complete</param>
        </member>
        <member name="M:Nest.ElasticClient.Flush(System.Boolean)">
            <summary>
            <para>Flushes all indices</para>
            <para>The flush process of an index basically frees memory from the index by flushing data to the index storage and clearing the internal transaction log. By default, ElasticSearch uses memory heuristics in order to automatically trigger flush operations as required in order to clear memory.</para>
            </summary>
            <param name="refresh">optional, wait for the flush operation to complete</param>
        </member>
        <member name="M:Nest.ElasticClient.Flush(System.String,System.Boolean)">
            <summary>
            <para>Flushes the specified index</para>
            <para>The flush process of an index basically frees memory from the index by flushing data to the index storage and clearing the internal transaction log. By default, ElasticSearch uses memory heuristics in order to automatically trigger flush operations as required in order to clear memory.</para>
            </summary>
            <param name="refresh">optional, wait for the flush operation to complete</param>
        </member>
        <member name="M:Nest.ElasticClient.Flush(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            <para>Flushes the specified indices</para>
            <para>The flush process of an index basically frees memory from the index by flushing data to the index storage and clearing the internal transaction log. By default, ElasticSearch uses memory heuristics in order to automatically trigger flush operations as required in order to clear memory.</para>
            </summary>
            <param name="refresh">optional, wait for the flush operation to complete</param>
        </member>
        <member name="M:Nest.ElasticClient.OpenIndex(System.String)">
            <summary>
            Open index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.CloseIndex(System.String)">
            <summary>
            Close index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.OpenIndex``1">
            <summary>
            Open the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.CloseIndex``1">
            <summary>
            Close the default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Refresh">
            <summary>
             refreshes all
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.ElasticClient.Refresh(System.String)">
            <summary>
            Refresh an index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Refresh(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Refresh multiple indices at once.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Refresh``1">
            <summary>
            refresh the connection settings default index for type T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.CountAllRaw(System.String)">
            <summary>
            Performs a count query over all indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.CountAll(System.Func{Nest.QueryDescriptor,Nest.BaseQuery})">
            <summary>
            Performs a count query over all indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.CountAll``1(System.Func{Nest.QueryDescriptor{``0},Nest.BaseQuery})">
            <summary>
            Performs a count query over all indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.CountRaw(System.String)">
            <summary>
            Performs a count query over the default index set in the client settings
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Count(System.Func{Nest.QueryDescriptor,Nest.BaseQuery})">
            <summary>
            Performs a count query over the default index set in the client settings
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Count(System.Collections.Generic.IEnumerable{System.String},System.Func{Nest.QueryDescriptor,Nest.BaseQuery})">
            <summary>
            Performs a count query over the passed indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Count(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Func{Nest.QueryDescriptor,Nest.BaseQuery})">
            <summary>
            Performs a count query over the multiple types in multiple indices.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.CountRaw``1(System.String)">
            <summary>
            Perform a count query over the default index and the inferred type name for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Count``1(System.Func{Nest.QueryDescriptor{``0},Nest.BaseQuery})">
            <summary>
            Perform a count query over the default index and the inferred type name for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Count``1(System.Collections.Generic.IEnumerable{System.String},System.Func{Nest.QueryDescriptor{``0},Nest.BaseQuery})">
            <summary>
            Performs a count query over the specified indices
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Count``1(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Func{Nest.QueryDescriptor{``0},Nest.BaseQuery})">
            <summary>
             Performs a count query over the multiple types in multiple indices.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Delete``1(``0)">
            <summary>
            Synchronously delete the object in the inferred type for T in the default index specified in the client settings
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Delete``1(``0,System.String)">
            <summary>
            Synchronously delete the object in the inferred type for T in specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Delete``1(``0,System.String,System.String)">
            <summary>
            Synchronously delete the object in specified type in the specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Delete``1(``0,Nest.DeleteParameters)">
            <summary>
            Synchronously delete the object in the inferred type for T in the default index specified in the client settings
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>	
        </member>
        <member name="M:Nest.ElasticClient.Delete``1(``0,System.String,Nest.DeleteParameters)">
            <summary>
            Synchronously delete the object in the inferred type for T in the specified index.
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.Delete``1(``0,System.String,System.String,Nest.DeleteParameters)">
            <summary>
            Synchronously delete the object in the inferred type for T in the specified index.
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.DeleteAsync``1(``0)">
            <summary>
            Asynchronously delete the object in the inferred type for T in the default index specified in the client settings
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteAsync``1(``0,System.String)">
            <summary>
            Asynchronously delete the object in the inferred type for T in specified index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.DeleteAsync``1(``0,System.String,System.String)">
            <summary>
            Asynchronously delete the object in specified type in the specified index
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.ElasticClient.DeleteAsync``1(``0,Nest.DeleteParameters)" -->
        <member name="M:Nest.ElasticClient.DeleteAsync``1(``0,System.String,Nest.DeleteParameters)">
            <summary>
            Asynchronously delete the object in the inferred type for T in the specified index.
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.DeleteAsync``1(``0,System.String,System.String,Nest.DeleteParameters)">
            <summary>
            Asynchronously delete the object in the inferred type for T in the specified index.
            </summary>
            <param name="deleteParameters">Allows you to pass in additional delete parameters such as version and routing</param>
        </member>
        <member name="M:Nest.ElasticClient.MapFromAttributes``1(System.Int32)">
            <summary>
            <para>Automatically map an object based on its attributes, this will also explicitly map strings to strings, datetimes to dates etc even 
            if they are not marked with any attributes.</para>
            <para>
            Type name is the inferred type name for T under the default index
            </para>
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.MapFromAttributes``1(System.String,System.Int32)">
            <summary>
            <para>Automatically map an object based on its attributes, this will also explicitly map strings to strings, datetimes to dates etc even 
            if they are not marked with any attributes.</para>
            <para>
            Type name is the inferred type name for T under the specified index
            </para>
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.MapFromAttributes``1(System.String,System.String,System.Int32)">
            <summary>
            <para>Automatically map an object based on its attributes, this will also explicitly map strings to strings, datetimes to dates etc even 
            if they are not marked with any attributes.</para>
            <para>
            Type name is the specified type name under the specified index
            </para>
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.MapFromAttributes(System.Type,System.Int32)">
            <summary>
            <para>Automatically map an object based on its attributes, this will also explicitly map strings to strings, datetimes to dates etc even 
            if they are not marked with any attributes.</para>
            <para>
            Type name is the inferred type name for T under the default index
            </para>
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.MapFromAttributes(System.Type,System.String,System.Int32)">
            <summary>
            <para>Automatically map an object based on its attributes, this will also explicitly map strings to strings, datetimes to dates etc even 
            if they are not marked with any attributes.</para>
            <para>
            Type name is the inferred type name for T under the specified index
            </para>
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.MapFromAttributes(System.Type,System.String,System.String,System.Int32)">
            <summary>
            <para>Automatically map an object based on its attributes, this will also explicitly map strings to strings, datetimes to dates etc even 
            if they are not marked with any attributes.</para>
            <para>
            Type name is the specified type name under the specified index
            </para>
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Map(Nest.RootObjectMapping)">
            <summary>
            Verbosely and explicitly map an object using a TypeMapping object, this gives you exact control over the mapping. Index is the inferred default index
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Map(Nest.RootObjectMapping,System.String,System.String,System.Boolean)">
            <summary>
            Verbosely and explicitly map an object using a TypeMapping object, this gives you exact control over the mapping.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.MapRaw(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Explicitly map an object using direct json input, the json should be of the form { "type" = {mapping} }.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Get``1(System.Int32)">
            <summary>
            Gets a document of T by id in the default index and the inferred typename for T
            </summary>
            <returns>an instance of T</returns>
        </member>
        <member name="M:Nest.ElasticClient.Get``1(System.String)">
            <summary>
            Gets a document of T by id in the default index and the inferred typename for T
            </summary>
            <returns>an instance of T</returns>
        </member>
        <member name="M:Nest.ElasticClient.Get``1(System.String,System.String,System.String)">
            <summary>
            Gets a document of T by id in the specified index and the specified typename
            </summary>
            <returns>an instance of T</returns>
        </member>
        <member name="M:Nest.ElasticClient.Get``1(System.String,System.String,System.Int32)">
            <summary>
            Gets a document of T by id in the specified index and the specified typename
            </summary>
            <returns>an instance of T</returns>
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0)">
            <summary>
            Index object to the default index and the inferred type name for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0,Nest.IndexParameters)">
            <summary>
            Index object to the default index and the inferred type name for T, using index parameters to further control the operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0,System.String)">
            <summary>
            Index object to the specified index and the inferred type name for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0,System.String,Nest.IndexParameters)">
            <summary>
            Index object to the specified index and the inferred type name for T, using index parameters to further control the operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0,System.String,System.String)">
            <summary>
            Index object to the specified index and the specified type name
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0,System.String,System.String,Nest.IndexParameters)">
            <summary>
            Index object to the specified index and the specified type name, using index parameters to further control the operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0,System.String,System.String,System.String)">
            <summary>
            Index object to the specified index and the specified type name and force the id of the object to update
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0,System.String,System.String,System.String,Nest.IndexParameters)">
            <summary>
            Index object to the specified index and the specified type name and force the id of the object to update, using index parameters to further control the operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0,System.String,System.String,System.Int32)">
            <summary>
            Index object to the specified index and the specified type name and force the id of the object to update
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Index``1(``0,System.String,System.String,System.Int32,Nest.IndexParameters)">
            <summary>
            Index object to the specified index and the specified type name and force the id of the object to update, using index parameters to further control the operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0)">
            <summary>
            Index object to the default index and the inferred type name for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0,Nest.IndexParameters)">
            <summary>
            Index object to the default index and the inferred type name for T, using index parameters to further control the operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0,System.String)">
            <summary>
            Index object to the specified index and the inferred type name for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0,System.String,Nest.IndexParameters)">
            <summary>
            Index object to the specified index and the inferred type name for T, using index parameters to further control the operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0,System.String,System.String)">
            <summary>
            Index object to the specified index and the specified type name
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0,System.String,System.String,Nest.IndexParameters)">
            <summary>
            Index object to the specified index and the specified type name, using index parameters to further control the operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0,System.String,System.String,System.String)">
            <summary>
            Index object to the specified index and the specified type name and force the id of the object to update
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0,System.String,System.String,System.String,Nest.IndexParameters)">
            <summary>
            Index object to the specified index and the specified type name and force the id of the object to update, using index parameters to further control the operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0,System.String,System.String,System.Int32)">
            <summary>
            Index object to the specified index and the specified type name and force the id of the object to update
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexAsync``1(``0,System.String,System.String,System.Int32,Nest.IndexParameters)">
            <summary>
            Index object to the specified index and the specified type name and force the id of the object to update, using index parameters to further control the operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Index objects to the default index and the inferred type name for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}})">
            <summary>
            Index objects to the default index and the inferred type name for T, using bulk parameters to control the individual objects
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{``0},Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the default index and the inferred type name for T
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the default index and the inferred type name for T, using bulk parameters to control the individual objects
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Index objects to the specified index and the inferred type name for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String)">
            <summary>
            Index objects to the specified index and the inferred type name for T, using bulk parameters to control the individual objects
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{``0},System.String,Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the specified index and the inferred type name for T
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the specified index and the inferred type name for T, using bulk parameters to control the individual objects
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Index objects to the specified index and the specified type name
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,System.String)">
            <summary>
            Index objects to the specified index and the specified type name, using bulk parameters to control the individual objects
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the specified index and the specified type name
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexMany``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,System.String,Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the specified index and the specified type name, using bulk parameters to control the individual objects
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Index objects to the default index and the inferred type name for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}})">
            <summary>
            Index objects to the default index and the inferred type name for T, using bulk parameters to control the individual objects
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{``0},Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the default index and the inferred type name for T
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the default index and the inferred type name for T, using bulk parameters to control the individual objects
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Index objects to the specified index and the inferred type name for T
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String)">
            <summary>
            Index objects to the specified index and the inferred type name for T, using bulk parameters to control the individual objects
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{``0},System.String,Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the specified index and the inferred type name for T
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the specified index and the inferred type name for T, using bulk parameters to control the individual objects
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Index objects to the specified index and the specified type name
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,System.String)">
            <summary>
            Index objects to the specified index and the specified type name, using bulk parameters to control the individual objects
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the specified index and the specified type name
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.IndexManyAsync``1(System.Collections.Generic.IEnumerable{Nest.BulkParameters{``0}},System.String,System.String,Nest.SimpleBulkParameters)">
            <summary>
            Index objects to the specified index and the specified type name, using bulk parameters to control the individual objects
            and SimpleBulkParameters to control the entire operation
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.ToResponse``1(Nest.ConnectionStatus,System.Boolean)">
            <summary>
            Returns a response of type R based on the connection status without parsing status.Result into R
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.ElasticClient.ToParsedResponse``1(Nest.ConnectionStatus,System.Boolean,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <summary>
            Returns a response of type R based on the connection status by trying parsing status.Result into R
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.ElasticClient.Search(Nest.FactoryDsl.SearchBuilder,System.String,System.String,System.String,System.Nullable{Nest.SearchType})">
            <summary>
            Search using dynamic as its return type.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Search``1(Nest.FactoryDsl.SearchBuilder,System.String,System.String,System.String,System.Nullable{Nest.SearchType})">
            <summary>
            Search using T as the return type
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Search(System.Func{Nest.SearchDescriptor{System.Object},Nest.SearchDescriptor{System.Object}})">
            <summary>
            Search using dynamic as its return type.
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.Search``1(System.Func{Nest.SearchDescriptor{``0},Nest.SearchDescriptor{``0}})">
            <summary>
            Search using T as the return type
            </summary>
        </member>
        <member name="M:Nest.ElasticClient.SearchRaw``1(System.String)">
            <summary>
            Search using T as the return type, string based.
            </summary>
        </member>
        <member name="P:Nest.ElasticClient.IsValid">
            <summary>
            Validates the connection once and returns a bool whether NEST could connect to elasticsearch.
            </summary>
        </member>
        <member name="P:Nest.ElasticClient.VersionInfo">
            <summary>
            Return the version info that was set when NEST did its one off sanity checks
            </summary>
        </member>
        <member name="T:Nest.Language">
            <summary>
            Language types used for language analyzers
            </summary>
        </member>
        <member name="T:Nest.LanguageAnalyzer">
            <summary>
            A set of analyzers aimed at analyzing specific language text. 
            </summary>
        </member>
        <member name="P:Nest.LanguageAnalyzer.StopWords">
            <summary>
            A list of stopword to initialize the stop filter with. Defaults to the english stop words.
            </summary>
        </member>
        <member name="P:Nest.LanguageAnalyzer.StopwordsPath">
            <summary>
            A path (either relative to config location, or absolute) to a stopwords file configuration.
            </summary>
        </member>
        <member name="T:Nest.KeywordAnalyzer">
            <summary>
            An analyzer of type keyword that “tokenizes” an entire stream as a single token. This is useful for data like zip codes, ids and so on. 
            <para>Note, when using mapping definitions, it make more sense to simply mark the field as not_analyzed.</para>
            </summary>
        </member>
        <member name="T:Nest.PatternAnalyzer">
            <summary>
            An analyzer of type pattern that can flexibly separate text into terms via a regular expression. 
            </summary>
        </member>
        <member name="T:Nest.StopAnalyzer">
            <summary>
            An analyzer of type stop that is built using a Lower Case Tokenizer, with Stop Token Filter.
            </summary>
        </member>
        <member name="P:Nest.StopAnalyzer.StopWords">
            <summary>
            A list of stopword to initialize the stop filter with. Defaults to the english stop words.
            </summary>
        </member>
        <member name="P:Nest.StopAnalyzer.StopwordsPath">
            <summary>
            A path (either relative to config location, or absolute) to a stopwords file configuration.
            </summary>
        </member>
        <member name="T:Nest.WhitespaceAnalyzer">
            <summary>
            An analyzer of type whitespace that is built using a Whitespace Tokenizer.
            </summary>
        </member>
        <member name="T:Nest.SimpleAnalyzer">
            <summary>
            An analyzer of type simple that is built using a Lower Case Tokenizer.
            </summary>
        </member>
        <member name="T:Nest.HtmlStripCharFilter">
            <summary>
            A char filter of type html_strip stripping out HTML elements from an analyzed text.
            </summary>
        </member>
        <member name="T:Nest.MappingCharFilter">
            <summary>
            A char filter of type mapping replacing characters of an analyzed text with given mapping.
            </summary>
        </member>
        <member name="T:Nest.AsciiFoldingTokenFilter">
            <summary>
            A token filter of type asciifolding that converts alphabetic, numeric, and symbolic Unicode characters which are 
            <para> not in the first 127 ASCII characters (the “Basic Latin” Unicode block) into their ASCII equivalents, if one exists.</para>
            </summary>
        </member>
        <member name="T:Nest.CompoundWordTokenFilter">
            <summary>
            Token filters that allow to decompose compound words.
            </summary>
        </member>
        <member name="T:Nest.TrimTokenFilter">
            <summary>
            The trim token filter trims surrounding whitespaces around a token.
            </summary>
        </member>
        <member name="T:Nest.UniqueTokenFilter">
            <summary>
            The unique token filter can be used to only index unique tokens during analysis. By default it is applied on all the token stream
            </summary>
        </member>
        <member name="P:Nest.UniqueTokenFilter.OnlyOnSamePosition">
            <summary>
             If only_on_same_position is set to true, it will only remove duplicate tokens on the same position.
            </summary>
        </member>
        <member name="T:Nest.TruncateTokenFilter">
            <summary>
            The truncate token filter can be used to truncate tokens into a specific length. This can come in handy with keyword (single token) 
            <para> based mapped fields that are used for sorting in order to reduce memory usage.</para>
            </summary>
        </member>
        <member name="P:Nest.TruncateTokenFilter.Length">
            <summary>
            length parameter which control the number of characters to truncate to, defaults to 10.
            </summary>
        </member>
        <member name="T:Nest.ElisionTokenFilter">
            <summary>
            A token filter which removes elisions. For example, “l’avion” (the plane) will tokenized as “avion” (plane).
            </summary>
        </member>
        <member name="P:Nest.ElisionTokenFilter.Articles">
            <summary>
            Accepts articles setting which is a set of stop words articles
            </summary>
        </member>
        <member name="T:Nest.ReverseTokenFilter">
            <summary>
            A token filter of type reverse that simply reverses the tokens.
            </summary>
        </member>
        <member name="T:Nest.PhoneticTokenFilter">
            <summary>
            The phonetic token filter is provided as a plugin.
            </summary>
        </member>
        <member name="T:Nest.SnowballTokenFilter">
            <summary>
            A filter that stems words using a Snowball-generated stemmer.
            </summary>
        </member>
        <member name="T:Nest.KStemTokenFilter">
             <summary>
            The kstem token filter is a high performance filter for english. 
            <para> All terms must already be lowercased (use lowercase filter) for this filter to work correctly.</para>
             </summary>
        </member>
        <member name="T:Nest.KeywordMarkerTokenFilter">
            <summary>
            Protects words from being modified by stemmers. Must be placed before any stemming filters.
            </summary>
        </member>
        <member name="T:Nest.StemmerTokenFilter">
            <summary>
            A filter that stems words (similar to snowball, but with more options).
            </summary>
        </member>
        <member name="T:Nest.PorterStemTokenFilter">
            <summary>
            A token filter of type porterStem that transforms the token stream as per the Porter stemming algorithm.
            </summary>
        </member>
        <member name="T:Nest.LowercaseTokenFilter">
             <summary>
             A token filter of type lowercase that normalizes token text to lower case.
            <para> Lowercase token filter supports Greek and Turkish lowercase token filters through the language parameter.</para>
             </summary>
        </member>
        <member name="T:Nest.LengthTokenFilter">
            <summary>
            A token filter of type length that removes words that are too long or too short for the stream.
            </summary>
        </member>
        <member name="T:Nest.StandardTokenFilter">
            <summary>
            A token filter of type standard that normalizes tokens extracted with the Standard Tokenizer.
            </summary>
        </member>
        <member name="T:Nest.PathHierarchyTokenizer">
             <summary>
             The path_hierarchy tokenizer takes something like this:
            <para>/something/something/else</para>
            <para>And produces tokens:</para>
            <para></para>
            <para>/something</para>
            <para>/something/something</para>
            <para>/something/something/else</para>
             </summary>
        </member>
        <member name="P:Nest.PathHierarchyTokenizer.Delimiter">
            <summary>
            The character delimiter to use, defaults to /.
            </summary>
        </member>
        <member name="P:Nest.PathHierarchyTokenizer.Replacement">
            <summary>
            An optional replacement character to use. Defaults to the delimiter
            </summary>
        </member>
        <member name="P:Nest.PathHierarchyTokenizer.BufferSize">
            <summary>
            The buffer size to use, defaults to 1024.
            </summary>
        </member>
        <member name="P:Nest.PathHierarchyTokenizer.Reverse">
            <summary>
            Generates tokens in reverse order, defaults to false.
            </summary>
        </member>
        <member name="P:Nest.PathHierarchyTokenizer.Skip">
            <summary>
            Controls initial tokens to skip, defaults to 0.
            </summary>
        </member>
        <member name="T:Nest.UaxEmailUrlTokenizer">
            <summary>
            A tokenizer of type uax_url_email which works exactly like the standard tokenizer, but tokenizes emails and urls as single tokens
            </summary>
        </member>
        <member name="P:Nest.UaxEmailUrlTokenizer.MaximumTokenLength">
            <summary>
            The maximum token length. If a token is seen that exceeds this length then it is discarded. Defaults to 255.
            </summary>
        </member>
        <member name="T:Nest.PatternTokenizer">
            <summary>
            A tokenizer of type pattern that can flexibly separate text into terms via a regular expression. 
            </summary>
        </member>
        <member name="P:Nest.PatternTokenizer.Pattern">
            <summary>
            The regular expression pattern, defaults to \W+.
            </summary>
        </member>
        <member name="P:Nest.PatternTokenizer.Flags">
            <summary>
            The regular expression flags.
            </summary>
        </member>
        <member name="P:Nest.PatternTokenizer.Group">
            <summary>
            Which group to extract into tokens. Defaults to -1 (split).
            </summary>
        </member>
        <member name="T:Nest.WhitespaceTokenizer">
            <summary>
            A tokenizer of type whitespace that divides text at whitespace.
            </summary>
        </member>
        <member name="T:Nest.StandardTokenizer">
            <summary>
            A tokenizer of type standard providing grammar based tokenizer that is a good tokenizer for most European language documents. 
            <para>The tokenizer implements the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29.</para>
            </summary>
        </member>
        <member name="P:Nest.StandardTokenizer.MaximumTokenLength">
            <summary>
            The maximum token length. If a token is seen that exceeds this length then it is discarded. Defaults to 255.
            </summary>
        </member>
        <member name="T:Nest.NGramTokenizer">
            <summary>
            A tokenizer of type nGram.
            </summary>
        </member>
        <member name="T:Nest.LowercaseTokenizer">
            <summary>
            A tokenizer of type lowercase that performs the function of Letter Tokenizer and Lower Case Token Filter together. 
            <para>It divides text at non-letters and converts them to lower case. </para>
            <para>While it is functionally equivalent to the combination of Letter Tokenizer and Lower Case Token Filter, </para>
            <para>there is a performance advantage to doing the two tasks at once, hence this (redundant) implementation.</para>
            </summary>
        </member>
        <member name="T:Nest.LetterTokenizer">
            <summary>
            A tokenizer of type letter that divides text at non-letters. That’s to say, it defines tokens as maximal strings of adjacent letters. 
            <para>Note, this does a decent job for most European languages, but does a terrible job for some Asian languages, where words are not separated by spaces.</para>
            </summary>
        </member>
        <member name="T:Nest.EdgeNGramTokenizer">
            <summary>
            A tokenizer of type edgeNGram.
            </summary>
        </member>
        <member name="T:Nest.KeywordTokenizer">
            <summary>
            A tokenizer of type keyword that emits the entire input as a single input.
            </summary>
        </member>
        <member name="P:Nest.KeywordTokenizer.BufferSize">
            <summary>
            The term buffer size. Defaults to 256.
            </summary>
        </member>
        <member name="T:Nest.EdgeNGramTokenFilter">
            <summary>
            A token filter of type edgeNGram.
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.InitializeUsing(Nest.IndexSettings)">
            <summary>
            Initialize the descriptor using the values from for instance a previous Get Index Settings call.
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.NumberOfShards(System.Int32)">
            <summary>
            Set the number of shards (if possible) for the new index.
            </summary>
            <param name="shards"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.NumberOfReplicas(System.Int32)">
            <summary>
            Set the number of replicas (if possible) for the new index.
            </summary>
            <param name="replicas"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.Settings(System.Action{Nest.FluentDictionary{System.String,System.Object}})">
            <summary>
            Set/Update settings, the index.* prefix is not needed for the keys.
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.RemoveMapping(System.String)">
            <summary>
            Remove an existing mapping by name
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.RemoveMapping``1">
            <summary>
            Remove an exisiting mapping by inferred type name
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.AddMapping``1(System.Func{Nest.RootObjectMappingDescriptor{``0},Nest.RootObjectMappingDescriptor{``0}})">
            <summary>
            Add a new mapping for T
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.AddMapping``1(Nest.RootObjectMapping,System.Func{Nest.RootObjectMappingDescriptor{``0},Nest.RootObjectMappingDescriptor{``0}})">
            <summary>
            Add a new mapping using the first rootObjectMapping parameter as the base to construct the new mapping.
            Handy if you wish to reuse a mapping.
            </summary>
        </member>
        <member name="M:Nest.CreateIndexDescriptor.Analysis(System.Func{Nest.AnalysisDescriptor,Nest.AnalysisDescriptor})">
            <summary>
            Set up analysis tokenizers, filters, analyzers
            </summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.Index(System.String)">
            <summary>
            Explicitly specify an index, otherwise the default index for T is used.
            </summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.Type(System.String)">
            <summary>
            Explicitly specify an type, otherwise the default type for T is used.
            </summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.Id(System.Int32)">
            <summary>
            Explicitly specify an id, otherwise the default index for T is used.
            Either Id() or Object() MUST be called for Nest to infer an id. 
            If both are specified Id() will win
            </summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.Id(System.String)">
            <summary>
            Explicitly specify an id, otherwise the default index for T is used.
            Either Id() or Object() MUST be called for Nest to infer an id. 
            If both are specified Id() will win
            </summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.Object(`0)">
            <summary>
            Specify an object to infer the id from
            Either Id() or Object() MUST be called for Nest to infer an id. 
            If both are specified Id() will win
            </summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.Options(System.Func{Nest.MoreLikeThisQueryDescriptor{`0},Nest.MoreLikeThisQueryDescriptor{`0}})">
            <summary>
            Specify on which fields the _mlt should act and how it should behave
            </summary>
        </member>
        <member name="M:Nest.MoreLikeThisDescriptor`1.Search(System.Func{Nest.SearchDescriptor{`0},Nest.SearchDescriptor{`0}})">
            <summary>
            Optionally specify more search options such as facets, from/to etcetera.
            </summary>
        </member>
        <member name="M:Nest.NestedObjectMappingDescriptor`2.MapFromAttributes(System.Int32)">
            <summary>
            Convenience method to map from most of the object from the attributes/properties.
            Later calls on the fluent interface can override whatever is set is by this call. 
            This helps mapping all the ints as ints, floats as floats etcetera withouth having to be overly verbose in your fluent mapping
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.ObjectMappingDescriptor`2.MapFromAttributes(System.Int32)">
            <summary>
            Convenience method to map from most of the object from the attributes/properties.
            Later calls on the fluent interface can override whatever is set is by this call. 
            This helps mapping all the ints as ints, floats as floats etcetera withouth having to be overly verbose in your fluent mapping
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nest.BinaryMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:Nest.BooleanMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:Nest.DateMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:Nest.NumberMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:Nest.StringMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="M:Nest.RootObjectMappingDescriptor`1.MapFromAttributes(System.Int32)">
            <summary>
            Convenience method to map from most of the object from the attributes/properties.
            Later calls on the fluent interface can override whatever is set is by this call. 
            This helps mapping all the ints as ints, floats as floats etcetera withouth having to be overly verbose in your fluent mapping
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.RootObjectMappingDescriptor`1.TypeName(System.String)">
            <summary>
            Explicitly set the typename otherwise it will infer the typename on its own (lowercase and pluralized).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.RootObjectMappingDescriptor`1.IndexName(System.String)">
            <summary>
            Explicitly set the index name otherwise it will infer the indexname based on the type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.RootObjectMappingDescriptor`1.IndexNames(System.String[])">
            <summary>
            Explicitly set the index names otherwise it will infer the indexname based on the type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.RootObjectMappingDescriptor`1.IndexNames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Explicitly set the index names otherwise it will infer the indexname based on the type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.RootObjectMappingDescriptor`1.IgnoreConflicts(System.Boolean)">
            <summary>
            When an existing mapping already exists under the given type, the two mapping definitions, the one already defined, and the new ones are merged. 
            The ignore_conflicts parameters can be used to control if conflicts should be ignored or not, by default, it is set to false which means conflicts are not ignored.
            The definition of conflict is really dependent on the type merged, but in general, if a different core type is defined, it is considered as a conflict. 
            New mapping definitions can be added to object types, and core type mapping can be upgraded to multi_field type.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.MultiGetDescriptor.FixedPath(System.String,System.String)">
            <summary>
            Allows you to perform the multiget on a fixed path. 
            The index and optionally type specified here take precedence over the chained get operations.
            </summary>
        </member>
        <member name="T:Nest.InMemoryConnection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nest.SimpleGetDescriptor`1.Index(System.String)">
            <summary>
            Manually set the index, default to the default index or the index set for the type on the connectionsettings.
            </summary>
        </member>
        <member name="M:Nest.SimpleGetDescriptor`1.Type(System.String)">
            <summary>
            Manualy set the type to get the object from, default to whatever
            T will be inferred to if not passed.
            </summary>
        </member>
        <member name="M:Nest.SimpleGetDescriptor`1.Type(System.Type)">
            <summary>
            Manually set the type of which a typename will be inferred
            </summary>
        </member>
        <member name="M:Nest.SimpleGetDescriptor`1.Fields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="M:Nest.SimpleGetDescriptor`1.Fields(System.String[])">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Index(System.String)">
            <summary>
            Manually set the index, default to the default index or the index set for the type on the connectionsettings.
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Type(System.String)">
            <summary>
            Manualy set the type to get the object from, default to whatever
            T will be inferred to if not passed.
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Type(System.Type)">
            <summary>
            Manually set the type of which a typename will be inferred
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Refresh(System.Boolean)">
            <summary>
            The refresh parameter can be set to true in order to refresh the relevant shard before the get operation and make it searchable. Setting it to true should be done after careful thought and verification that this does not cause a heavy load on the system (and slows down indexing).
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Routing(System.String)">
            <summary>
            When indexing using the ability to control the routing, in order to get a document, the routing value should also be provided.
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Realtime(System.Boolean)">
            <summary>
            By default, the get API is realtime, and is not affected by the refresh rate of the index (when data will become visible for search).
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Fields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Fields(System.String[])">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.Preference(System.String)">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            Custom (string) value: A custom value will be used to guarantee that the same shards
            will be used for the same custom value. This can help with “jumping values” 
            when hitting different shards in different refresh states. 
            A sample value can be something like the web session id, or the user name.
            </para>
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.ExecuteOnPrimary">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            The operation will go and be executed only on the primary shards.
            </para>
            </summary>
        </member>
        <member name="M:Nest.GetDescriptor`1.ExecuteOnLocalShard">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            The operation will prefer to be executed on a local allocated shard is possible.
            </para>
            </summary>
        </member>
        <member name="T:Nest.NgramTokenFilter">
            <summary>
            A token filter of type nGram.
            </summary>
        </member>
        <member name="T:Nest.SynonymTokenFilter">
            <summary>
            The synonym token filter allows to easily handle synonyms during the analysis process. 
            </summary>
        </member>
        <member name="P:Nest.ValidateResponse.Explanations">
            <summary>
            Gets the explanations if Explain() was set.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.QueryString(System.Action{Nest.QueryStringDescriptor{`0}})">
            <summary>
            A query that uses a query parser in order to parse its content.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Terms(System.String,System.String[])">
            <summary>
            A query that match on any (configurable) of the provided terms. This is a simpler syntax query for using a bool query with several term queries in the should clauses.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Terms(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String[])">
            <summary>
            A query that match on any (configurable) of the provided terms. This is a simpler syntax query for using a bool query with several term queries in the should clauses.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.TermsDescriptor(System.Action{Nest.TermsQueryDescriptor{`0}})">
            <summary>
            A query that match on any (configurable) of the provided terms. This is a simpler syntax query for using a bool query with several term queries in the should clauses.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Fuzzy(System.Action{Nest.FuzzyQueryDescriptor{`0}})">
            <summary>
            A fuzzy based query that uses similarity based on Levenshtein (edit distance) algorithm.
            Warning: this query is not very scalable with its default prefix length of 0 – in this case,
            every term will be enumerated and cause an edit score calculation or max_expansions is not set.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.FuzzyNumeric(System.Action{Nest.FuzzyNumericQueryDescriptor{`0}})">
            <summary>
            fuzzy query on a numeric field will result in a range query “around” the value using the min_similarity value
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.FuzzyDate(System.Action{Nest.FuzzyDateQueryDescriptor{`0}})">
            <summary>
            fuzzy query on a numeric field will result in a range query “around” the value using the min_similarity value
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Text(System.Action{Nest.TextQueryDescriptor{`0}})">
            <summary>
            The default text query is of type boolean. It means that the text provided is analyzed and the analysis 
            process constructs a boolean query from the provided text.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.TextPhrase(System.Action{Nest.TextPhraseQueryDescriptor{`0}})">
            <summary>
            The text_phrase query analyzes the text and creates a phrase query out of the analyzed text. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.TextPhrasePrefix(System.Action{Nest.TextPhrasePrefixQueryDescriptor{`0}})">
            <summary>
            The text_phrase_prefix is the same as text_phrase, expect it allows for prefix matches on the last term 
            in the text
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Nested(System.Action{Nest.NestedQueryDescriptor{`0}})">
            <summary>
            Nested query allows to query nested objects / docs (see nested mapping). The query is executed against the 
            nested objects / docs as if they were indexed as separate docs (they are, internally) and resulting in the
            root parent doc (or parent nested mapping).
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Indices(System.Action{Nest.IndicesQueryDescriptor{`0}})">
            <summary>
            The indices query can be used when executed across multiple indices, allowing to have a query that executes
            only when executed on an index that matches a specific list of indices, and another query that executes 
            when it is executed on an index that does not match the listed indices.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Range(System.Action{Nest.RangeQueryDescriptor{`0}})">
            <summary>
            Matches documents with fields that have terms within a certain range. The type of the Lucene query depends
            on the field type, for string fields, the TermRangeQuery, while for number/date fields, the query is
            a NumericRangeQuery
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.FuzzyLikeThis(System.Action{Nest.FuzzyLikeThisDescriptor{`0}})">
            <summary>
            Fuzzy like this query find documents that are “like” provided text by running it against one or more fields.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.MoreLikeThis(System.Action{Nest.MoreLikeThisQueryDescriptor{`0}})">
            <summary>
            More like this query find documents that are “like” provided text by running it against one or more fields.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.HasChild``1(System.Action{Nest.HasChildQueryDescriptor{``0}})">
            <summary>
            The has_child query works the same as the has_child filter, by automatically wrapping the filter with a 
            constant_score.
            </summary>
            <typeparam name="K">Type of the child</typeparam>
        </member>
        <member name="M:Nest.QueryDescriptor`1.TopChildren``1(System.Action{Nest.TopChildrenQueryDescriptor{``0}})">
            <summary>
            The top_children query runs the child query with an estimated hits size, and out of the hit docs, aggregates 
            it into parent docs. If there aren’t enough parent docs matching the requested from/size search request, 
            then it is run again with a wider (more hits) search.
            </summary>
            <typeparam name="K">Type of the child</typeparam>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Filtered(System.Action{Nest.FilteredQueryDescriptor{`0}})">
            <summary>
            A query that applies a filter to the results of another query. This query maps to Lucene FilteredQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Dismax(System.Action{Nest.DismaxQueryDescriptor{`0}})">
            <summary>
            A query that generates the union of documents produced by its subqueries, and that scores each document 
            with the maximum score for that document as produced by any subquery, plus a tie breaking increment for 
            any additional matching subqueries.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.ConstantScore(System.Action{Nest.ConstantScoreQueryDescriptor{`0}})">
            <summary>
            A query that wraps a filter or another query and simply returns a constant score equal to the query boost 
            for every document in the filter. Maps to Lucene ConstantScoreQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.CustomBoostFactor(System.Action{Nest.CustomBoostFactorQueryDescriptor{`0}})">
            <summary>
            custom_boost_factor query allows to wrap another query and multiply its score by the provided boost_factor.
            This can sometimes be desired since boost value set on specific queries gets normalized, while this 
            query boost factor does not.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.CustomScore(System.Action{Nest.CustomScoreQueryDescriptor{`0}})">
            <summary>
            custom_score query allows to wrap another query and customize the scoring of it optionally with a 
            computation derived from other field values in the doc (numeric ones) using script expression
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Bool(System.Action{Nest.BoolQueryDescriptor{`0}})">
            <summary>
            A query that matches documents matching boolean combinations of other queries. The bool query maps to 
            Lucene BooleanQuery. 
            It is built using one or more boolean clauses, each clause with a typed occurrence
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Boosting(System.Action{Nest.BoostingQueryDescriptor{`0}})">
            <summary>
            the boosting query can be used to effectively demote results that match a given query. 
            Unlike the “NOT” clause in bool query, this still selects documents that contain
            undesirable terms, but reduces their overall score.
            </summary>
            <param name="boostingQuery"></param>
        </member>
        <member name="M:Nest.QueryDescriptor`1.MatchAll(System.Nullable{System.Double},System.String)">
            <summary>
            A query that matches all documents. Maps to Lucene MatchAllDocsQuery.
            </summary>
            <param name="NormField">
            When indexing, a boost value can either be associated on the document level, or per field. 
            The match all query does not take boosting into account by default. In order to take 
            boosting into account, the norms_field needs to be provided in order to explicitly specify which
            field the boosting will be done on (Note, this will result in slower execution time).
            </param>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Term(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Nullable{System.Double})">
            <summary>
            Matches documents that have fields that contain a term (not analyzed). 
            The term query maps to Lucene TermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Term(System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Matches documents that have fields that contain a term (not analyzed). 
            The term query maps to Lucene TermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Wildcard(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Nullable{System.Double},System.Nullable{Nest.RewriteMultiTerm})">
            <summary>
            Matches documents that have fields matching a wildcard expression (not analyzed). 
            Supported wildcards are *, which matches any character sequence (including the empty one), and ?, 
            which matches any single character. Note this query can be slow, as it needs to iterate 
            over many terms. In order to prevent extremely slow wildcard queries, a wildcard term should 
            not start with one of the wildcards * or ?. The wildcard query maps to Lucene WildcardQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Wildcard(System.String,System.String,System.Nullable{System.Double},System.Nullable{Nest.RewriteMultiTerm})">
            <summary>
            Matches documents that have fields matching a wildcard expression (not analyzed). 
            Supported wildcards are *, which matches any character sequence (including the empty one), and ?,
            which matches any single character. Note this query can be slow, as it needs to iterate over many terms. 
            In order to prevent extremely slow wildcard queries, a wildcard term should not start with 
            one of the wildcards * or ?. The wildcard query maps to Lucene WildcardQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Prefix(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Nullable{System.Double},System.Nullable{Nest.RewriteMultiTerm})">
            <summary>
            Matches documents that have fields containing terms with a specified prefix (not analyzed). 
            The prefix query maps to Lucene PrefixQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Prefix(System.String,System.String,System.Nullable{System.Double},System.Nullable{Nest.RewriteMultiTerm})">
            <summary>
            Matches documents that have fields containing terms with a specified prefix (not analyzed). 
            The prefix query maps to Lucene PrefixQuery. 
            </summary>	
        </member>
        <member name="M:Nest.QueryDescriptor`1.Ids(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. Note, this filter does not require 
            the _id field to be indexed since it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Ids(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. 
            Note, this filter does not require the _id field to be indexed since
            it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.Ids(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. 
            Note, this filter does not require the _id field to be indexed since 
            it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanTerm(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Nullable{System.Double})">
            <summary>
            Matches spans containing a term. The span term query maps to Lucene SpanTermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanTerm(System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Matches spans containing a term. The span term query maps to Lucene SpanTermQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanFirst(System.Action{Nest.SpanFirstQueryDescriptor{`0}})">
            <summary>
            Matches spans near the beginning of a field. The span first query maps to Lucene SpanFirstQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanNear(System.Action{Nest.SpanNearQueryDescriptor{`0}})">
            <summary>
            Matches spans which are near one another. One can specify slop, the maximum number of 
            intervening unmatched positions, as well as whether matches are required to be in-order.
            The span near query maps to Lucene SpanNearQuery.
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanOr(System.Action{Nest.SpanOrQueryDescriptor{`0}})">
            <summary>
            Matches the union of its span clauses. 
            The span or query maps to Lucene SpanOrQuery. 
            </summary>
        </member>
        <member name="M:Nest.QueryDescriptor`1.SpanNot(System.Action{Nest.SpanNotQueryDescriptor{`0}})">
            <summary>
            Removes matches which overlap with another span query. 
            The span not query maps to Lucene SpanNotQuery.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Filters documents where a specific field has a value in them.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Exists(System.String)">
            <summary>
            Filters documents where a specific field has a value in them.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Missing(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Filters documents where a specific field has no value in them.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Missing(System.String)">
            <summary>
            Filters documents where a specific field has no value in them.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Ids(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. 
            Note, this filter does not require the _id field to be indexed since it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Ids(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. 
            Note, this filter does not require the _id field to be indexed since it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Ids(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filters documents that only have the provided ids. 
            Note, this filter does not require the _id field to be indexed since it works using the _uid field.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoBoundingBox(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.String,System.Nullable{Nest.GeoExecution})">
            <summary>
            A filter allowing to filter hits based on a point location using a bounding box
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoBoundingBox(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Double,System.Double,System.Double,System.Double,System.Nullable{Nest.GeoExecution})">
            <summary>
            A filter allowing to filter hits based on a point location using a bounding box
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoBoundingBox(System.String,System.Double,System.Double,System.Double,System.Double,System.Nullable{Nest.GeoExecution})">
            <summary>
            A filter allowing to filter hits based on a point location using a bounding box
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoBoundingBox(System.String,System.String,System.String,System.Nullable{Nest.GeoExecution})">
            <summary>
            A filter allowing to filter hits based on a point location using a bounding box
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoDistance(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoDistanceFilterDescriptor})">
            <summary>
            Filters documents that include only hits that exists within a specific distance from a geo point. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoDistance(System.String,System.Action{Nest.GeoDistanceFilterDescriptor})">
            <summary>
            Filters documents that include only hits that exists within a specific distance from a geo point. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoDistanceRange(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Nest.GeoDistanceRangeFilterDescriptor})">
            <summary>
            Filters documents that exists within a range from a specific point:
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoDistanceRange(System.String,System.Action{Nest.GeoDistanceRangeFilterDescriptor})">
            <summary>
            Filters documents that exists within a range from a specific point:
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoPolygon(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{System.Tuple{System.Double,System.Double}})">
            <summary>
            A filter allowing to include hits that only fall within a polygon of points. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoPolygon(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.Double,System.Double}})">
            <summary>
            A filter allowing to include hits that only fall within a polygon of points. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoPolygon(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String[])">
            <summary>
            A filter allowing to include hits that only fall within a polygon of points. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.GeoPolygon(System.String,System.String[])">
            <summary>
            A filter allowing to include hits that only fall within a polygon of points. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.HasChild``1(System.Action{Nest.HasChildFilterDescriptor{``0}})">
            <summary>
            The has_child filter accepts a query and the child type to run against, 
            and results in parent documents that have child docs matching the query.
            </summary>
            <typeparam name="K">Type of the child</typeparam>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Limit(System.Nullable{System.Int32})">
            <summary>
            A limit filter limits the number of documents (per shard) to execute on.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Type(System.String)">
            <summary>
            Filters documents matching the provided document / mapping type. 
            Note, this filter can work even when the _type field is not indexed 
            (using the _uid field).
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.MatchAll">
            <summary>
            A filter that matches on all documents.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.NumericRange(System.Action{Nest.NumericRangeFilterDescriptor{`0}})">
            <summary>
            Filters documents with fields that have values within a certain numeric range. 
            Similar to range filter, except that it works only with numeric values, 
            and the filter execution works differently.
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Range(System.Action{Nest.RangeFilterDescriptor{`0}})">
            <summary>
            Filters documents with fields that have terms within a certain range. 
            Similar to range query, except that it acts as a filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Script(System.Action{Nest.ScriptFilterDescriptor})">
            <summary>
            A filter allowing to define scripts as filters. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Prefix(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Filters documents that have fields containing terms with a specified prefix 
            (not analyzed). Similar to phrase query, except that it acts as a filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Prefix(System.String,System.String)">
            <summary>
            Filters documents that have fields containing terms with a specified prefix 
            (not analyzed). Similar to phrase query, except that it acts as a filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Term(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Filters documents that have fields that contain a term (not analyzed). 
            Similar to term query, except that it acts as a filter
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Term(System.String,System.String)">
            <summary>
            Filters documents that have fields that contain a term (not analyzed).
            Similar to term query, except that it acts as a filter
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Terms(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{System.String},System.Nullable{Nest.TermsExecution})">
            <summary>
            Filters documents that have fields that match any of the provided terms (not analyzed). 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Terms(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Nest.TermsExecution})">
            <summary>
            Filters documents that have fields that match any of the provided terms (not analyzed). 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.And(System.Func{Nest.FilterDescriptor{`0},Nest.BaseFilter}[])">
            <summary>
            A filter that matches documents using AND boolean operator on other queries. 
            This filter is more performant then bool filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.And(Nest.BaseFilter[])">
            <summary>
            A filter that matches documents using AND boolean operator on other queries. 
            This filter is more performant then bool filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Or(System.Func{Nest.FilterDescriptor{`0},Nest.BaseFilter}[])">
            <summary>
            A filter that matches documents using OR boolean operator on other queries. 
            This filter is more performant then bool filter
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Or(Nest.BaseFilter[])">
            <summary>
            A filter that matches documents using OR boolean operator on other queries. 
            This filter is more performant then bool filter
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Not(System.Func{Nest.FilterDescriptor{`0},Nest.BaseFilter})">
            <summary>
            A filter that filters out matched documents using a query. 
            This filter is more performant then bool filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Bool(System.Action{Nest.BoolFilterDescriptor{`0}})">
            <summary>
            
            A filter that matches documents matching boolean combinations of other queries.
            Similar in concept to Boolean query, except that the clauses are other filters. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Query(System.Func{Nest.QueryDescriptor{`0},Nest.BaseQuery})">
            <summary>
            Wraps any query to be used as a filter. 
            </summary>
        </member>
        <member name="M:Nest.FilterDescriptor`1.Nested(System.Action{Nest.NestedFilterDescriptor{`0}})">
            <summary>
             A nested filter, works in a similar fashion to the nested query, except used as a filter.
             It follows exactly the same structure, but also allows to cache the results 
             (set _cache to true), and have it named (set the _name value). 
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.FromExclusive">
            <summary>
            Forces the 'From()' to be exclusive (which is inclusive by default).
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.ToExclusive">
            <summary>
            Forces the 'To()' to be exclusive (which is inclusive by default).
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.To(System.Nullable{System.Int32})">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.From(System.Nullable{System.Int32})">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.Greater(System.Nullable{System.Int32})">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.GreaterOrEquals(System.Nullable{System.Int32})">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.Lower(System.Nullable{System.Int32})">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.LowerOrEquals(System.Nullable{System.Int32})">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.To(System.Nullable{System.Double})">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.From(System.Nullable{System.Double})">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.Greater(System.Nullable{System.Double})">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.GreaterOrEquals(System.Nullable{System.Double})">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.Lower(System.Nullable{System.Double})">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.LowerOrEquals(System.Nullable{System.Double})">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.To(System.String)">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.From(System.String)">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.Greater(System.String)">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.GreaterOrEquals(System.String)">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.Lower(System.String)">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.LowerOrEquals(System.String)">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.To(System.Nullable{System.DateTime},System.String)">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.From(System.Nullable{System.DateTime},System.String)">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.Greater(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.GreaterOrEquals(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.Lower(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.RangeFilterDescriptor`1.LowerOrEquals(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.MinimumNumberShouldMatch(System.Int32)">
            <summary>
            Specifies a minimum number of the optional BooleanClauses which must be satisfied.
            </summary>
            <param name="minimumShouldMatches"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.Must(System.Func{Nest.QueryDescriptor{`0},Nest.BaseQuery}[])">
            <summary>
            The clause(s) that must appear in matching documents
            </summary>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.Must(Nest.BaseQuery[])">
            <summary>
            The clause(s) that must appear in matching documents
            </summary>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.MustNot(System.Func{Nest.QueryDescriptor{`0},Nest.BaseQuery}[])">
            <summary>
            The clause (query) should appear in the matching document. A boolean query with no must clauses, one or more should clauses must match a document. The minimum number of should clauses to match can be set using minimum_number_should_match parameter.
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.MustNot(Nest.BaseQuery[])">
            <summary>
            The clause (query) should appear in the matching document. A boolean query with no must clauses, one or more should clauses must match a document. The minimum number of should clauses to match can be set using minimum_number_should_match parameter.
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.Should(System.Func{Nest.QueryDescriptor{`0},Nest.BaseQuery}[])">
            <summary>
            The clause (query) must not appear in the matching documents. Note that it is not possible to search on documents that only consists of a must_not clauses.
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.BoolQueryDescriptor`1.Should(Nest.BaseQuery[])">
            <summary>
            The clause (query) must not appear in the matching documents. Note that it is not possible to search on documents that only consists of a must_not clauses.
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.ToExclusive">
            <summary>
            Forces the 'To()' to be exclusive (which is inclusive by default).
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.FromExclusive">
            <summary>
            Forces the 'From()' to be exclusive (which is inclusive by default).
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.To(System.Nullable{System.Int32})">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.From(System.Nullable{System.Int32})">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.Greater(System.Nullable{System.Int32})">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.GreaterOrEquals(System.Nullable{System.Int32})">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.Lower(System.Nullable{System.Int32})">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.LowerOrEquals(System.Nullable{System.Int32})">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.To(System.Nullable{System.Double})">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.From(System.Nullable{System.Double})">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.Greater(System.Nullable{System.Double})">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.GreaterOrEquals(System.Nullable{System.Double})">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.Lower(System.Nullable{System.Double})">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.LowerOrEquals(System.Nullable{System.Double})">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.To(System.String)">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.From(System.String)">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.Greater(System.String)">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.GreaterOrEquals(System.String)">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.Lower(System.String)">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.LowerOrEquals(System.String)">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.To(System.Nullable{System.DateTime},System.String)">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.From(System.Nullable{System.DateTime},System.String)">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.Greater(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.GreaterOrEquals(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.Lower(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.RangeQueryDescriptor`1.LowerOrEquals(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="T:Nest.TextPhrasePrefixQueryDescriptor`1">
            <summary>
            A Query that matches documents containing a particular sequence of terms.
            It allows for prefix matches on the last term in the text.
            </summary>
            <typeparam name="T">Type of document</typeparam>
        </member>
        <member name="T:Nest.TextPhraseQueryDescriptor`1">
            <summary>
            A Query that matches documents containing a particular sequence of terms. A PhraseQuery is built by QueryParser for input like "new york".
            </summary>
            <typeparam name="T">Type of document</typeparam>
        </member>
        <member name="M:Nest.CustomScoreQueryDescriptor`1.Script(System.String)">
            <summary>
            Scripts are cached for faster execution. If the script has parameters that it needs to take into account, it is preferable to use the same script, and provide parameters to it:
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.DSL.Descriptors.SortDescriptor`1.ToggleSort(System.Boolean)">
            <summary>
            Pass true to sort ascending false to sort descending
            </summary>
        </member>
        <member name="M:Nest.DSL.Descriptors.SortGeoDistanceDescriptor`1.ToggleSort(System.Boolean)">
            <summary>
            Pass true to sort ascending false to sort descending
            </summary>
        </member>
        <member name="M:Nest.DSL.Descriptors.SortScriptDescriptor`1.MissingValue(System.String)">
            <summary>
            Value to sort on when the orginal value for the field is missing
            </summary>
        </member>
        <member name="M:Nest.DSL.Descriptors.SortScriptDescriptor`1.ToggleSort(System.Boolean)">
            <summary>
            Pass true to sort ascending false to sort descending
            </summary>
        </member>
        <member name="T:Nest.FactoryDsl.Common.GeoHashUtils">
            <summary>
            Shamelessly stolen from Lucene.Net.Spatial.GeoHash :D
            </summary>
        </member>
        <member name="T:Nest.Lang">
            <summary>
            Scripting Language.
            </summary>
        </member>
        <member name="F:Nest.Lang.mvel">
            <summary>
            Language Mvel.
            </summary>
        </member>
        <member name="F:Nest.Lang.js">
            <summary>
            Language Java Script.
            </summary>
        </member>
        <member name="F:Nest.Lang.groovy">
            <summary>
            Language Groovy
            </summary>
        </member>
        <member name="F:Nest.Lang.python">
            <summary>
            Language Python
            </summary>
        </member>
        <member name="F:Nest.Lang.native">
            <summary>
            Native
            </summary>
        </member>
        <member name="T:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder">
            <summary>
            A facet builder of date histogram facets.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.#ctor(System.String)">
            <summary>
            Constructs a new date histogram facet with the provided facet logical name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.Field(System.String)">
            <summary>
            The field name to perform the histogram facet. Translates to perform the histogram facet
            using the provided field as both the {@link #keyField(string)} and {@link #valueField(string)}.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.KeyField(System.String)">
            <summary>
            The field name to use in order to control where the hit will "fall into" within the histogram
            entries. Essentially, using the key field numeric value, the hit will be "rounded" into the relevant
            bucket controlled by the interval.
            </summary>
            <param name="keyField"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.ValueField(System.String)">
            <summary>
            The field name to use as the value of the hit to compute data based on values within the interval
            (for example, total).
            </summary>
            <param name="valueField"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.Lang(System.String)">
            <summary>
            The language of the value script.
            </summary>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.Interval(System.String)">
            <summary>
            The interval used to control the bucket "size" where each key value of a hit will fall into. Check
            the docs for all available values.
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.Zone(System.String)">
            <summary>
            Sets the time zone to use when bucketing the values. Can either be in the form of "-10:00" or
            one of the values listed here: http://joda-time.sourceforge.net/timezones.html.
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.Global(System.Boolean)">
            <summary>
            Should the facet run in global mode (not bounded by the search query) or not (bounded by
            the search query). Defaults to <tt>false</tt>.
            </summary>
            <param name="global"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.Scope(System.String)">
            <summary>
            Marks the facet to run in a specific scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.FacetFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            An additional filter used to further filter down the set of documents the facet will run on.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.DateHistogramFacetBuilder.Nested(System.String)">
            <summary>
            Sets the nested path the facet will execute on. A match (root object) will then cause all the
            nested objects matching the path to be computed into the facet.
            </summary>
            <param name="nested"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.FilterFacetBuilder.Global(System.Boolean)">
            <summary>
            Should the facet run in global mode (not bounded by the search query) or not (bounded by
            the search query). Defaults to <tt>false</tt>.
            </summary>
            <param name="global"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.FilterFacetBuilder.Scope(System.String)">
            <summary>
            Marks the facet to run in a specific scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.FilterFacetBuilder.FacetFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            An additional filter used to further filter down the set of documents the facet will run on.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.FilterFacetBuilder.Nested(System.String)">
            <summary>
            Sets the nested path the facet will execute on. A match (root object) will then cause all the
            nested objects matching the path to be computed into the facet.
            </summary>
            <param name="nested"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder">
            <summary>
            A geo distance builder allowing to create a facet of distances from a specific location including the
            number of hits within each distance range, and aggregated data (like totals of either the distance or
            custom value fields).
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.#ctor(System.String)">
            <summary>
            Constructs a new geo distance with the provided facet name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.Field(System.String)">
            <summary>
            The geo point field that will be used to extract the document location(s).
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.ValueField(System.String)">
            <summary>
            A custom value field (numeric) that will be used to provide aggregated data for each facet (for example, total).
            </summary>
            <param name="valueFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.ValueScript(System.String)">
            <summary>
            A custom value script (result is numeric) that will be used to provide aggregated data for each facet (for example, total).
            </summary>
            <param name="valueScript"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.Lang(System.String)">
            <summary>
            The language of the {@link #valueScript(string)} script.
            </summary>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.ScriptParam(System.String,System.Object)">
            <summary>
            Parameters for {@link #valueScript(string)} to improve performance when executing the same script with different parameters.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.Point(System.Double,System.Double)">
            <summary>
            The point to create the range distance facets from.
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.Lat(System.Double)">
            <summary>
            The latitude to create the range distance facets from.
            </summary>
            <param name="lat"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.Lon(System.Double)">
            <summary>
            The longitude to create the range distance facets from.
            </summary>
            <param name="lon"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.Geohash(System.String)">
            <summary>
            The geohash of the geo point to create the range distance facets from.
            </summary>
            <param name="geohash"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.GeoDistance(Nest.GeoDistance)">
            <summary>
            The geo distance type used to compute the distance.
            </summary>
            <param name="geoDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.AddRange(System.Double,System.Double)">
            <summary>
            Adds a range entry with explicit from and to.
            </summary>
            <param name="from">The from distance limit</param>
            <param name="to">The to distance limit</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.AddUnboundedTo(System.Double)">
            <summary>
            Adds a range entry with explicit from and unbounded to.
            </summary>
            <param name="from">The from distance limit, to is unbounded.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.AddUnboundedFrom(System.Double)">
            <summary>
            Adds a range entry with explicit to and unbounded from.
            </summary>
            <param name="to">The to distance limit, from is unbounded.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.Unit(Nest.DistanceUnit)">
            <summary>
            The distance unit to use. Defaults to {@link org.elasticsearch.common.unit.DistanceUnit#KILOMETERS}
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.Global(System.Boolean)">
            <summary>
            Should the facet run in global mode (not bounded by the search query) or not (bounded by
            the search query). Defaults to <tt>false</tt>.
            </summary>
            <param name="global"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.Scope(System.String)">
            <summary>
            Marks the facet to run in a specific scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.FacetFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            An additional filter used to further filter down the set of documents the facet will run on.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.GeoDistanceFacetBuilder.Nested(System.String)">
            <summary>
            Sets the nested path the facet will execute on. A match (root object) will then cause all the
            nested objects matching the path to be computed into the facet.
            </summary>
            <param name="nested"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Facet.HistogramFacetBuilder">
            <summary>
            A facet builder of histogram facets.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.#ctor(System.String)">
            <summary>
            Constructs a new histogram facet with the provided facet logical name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.Field(System.String)">
            <summary>
            The field name to perform the histogram facet. Translates to perform the histogram facet
            using the provided field as both the {@link #keyField(string)} and {@link #valueField(string)}.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.KeyField(System.String)">
            <summary>
            The field name to use in order to control where the hit will "fall into" within the histogram
            entries. Essentially, using the key field numeric value, the hit will be "rounded" into the relevant
            bucket controlled by the interval.
            </summary>
            <param name="keyField"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.ValueField(System.String)">
            <summary>
            The field name to use as the value of the hit to compute data based on values within the interval
            (for example, total).
            </summary>
            <param name="valueField"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.Interval(System.Int64)">
            <summary>
            The interval used to control the bucket "size" where each key value of a hit will fall into.
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.Interval(System.TimeSpan)">
            <summary>
            The interval used to control the bucket "size" where each key value of a hit will fall into.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.Bounds(System.Object,System.Object)">
            <summary>
            Sets the bounds from and to for the facet. Both performs bounds check and includes only
            values within the bounds, and improves performance.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.Global(System.Boolean)">
            <summary>
            Should the facet run in global mode (not bounded by the search query) or not (bounded by
            the search query). Defaults to <tt>false</tt>.
            </summary>
            <param name="global"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.Scope(System.String)">
            <summary>
            Marks the facet to run in a specific scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.FacetFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            An additional filter used to further filter down the set of documents the facet will run on.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramFacetBuilder.Nested(System.String)">
            <summary>
            Sets the nested path the facet will execute on. A match (root object) will then cause all the
            nested objects matching the path to be computed into the facet.
            </summary>
            <param name="nested"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramScriptFacetBuilder.Lang(System.String)">
            <summary>
            The language of the script.
            </summary>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramScriptFacetBuilder.Param(System.String,System.Object)">
            <summary>
             Parameters for {@link #valueScript(string)} to improve performance when executing the same script with different parameters.
             </summary>
             <param name="name"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramScriptFacetBuilder.Global(System.Boolean)">
            <summary>
            Should the facet run in global mode (not bounded by the search query) or not (bounded by
            the search query). Defaults to <tt>false</tt>.
            </summary>
            <param name="global"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramScriptFacetBuilder.Scope(System.String)">
            <summary>
            Marks the facet to run in a specific scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramScriptFacetBuilder.FacetFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            An additional filter used to further filter down the set of documents the facet will run on.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.HistogramScriptFacetBuilder.Nested(System.String)">
            <summary>
            Sets the nested path the facet will execute on. A match (root object) will then cause all the
            nested objects matching the path to be computed into the facet.
            </summary>
            <param name="nested"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.QueryFacetBuilder.Global(System.Boolean)">
            <summary>
            Should the facet run in global mode (not bounded by the search query) or not (bounded by
            the search query). Defaults to <tt>false</tt>.
            </summary>
            <param name="global"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.QueryFacetBuilder.Scope(System.String)">
            <summary>
            Marks the facet to run in a specific scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.QueryFacetBuilder.FacetFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            An additional filter used to further filter down the set of documents the facet will run on.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.QueryFacetBuilder.Nested(System.String)">
            <summary>
            Sets the nested path the facet will execute on. A match (root object) will then cause all the
            nested objects matching the path to be computed into the facet.
            </summary>
            <param name="nested"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Facet.RangeFacetBuilder">
            <summary>
            A facet builder of range facets.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.#ctor(System.String)">
            <summary>
            Constructs a new range facet with the provided facet logical name.
            </summary>
            <param name="name">The logical name of the facet</param>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.Field(System.String)">
            <summary>
            The field name to perform the range facet. Translates to perform the range facet
            using the provided field as both the {@link #keyField(String)} and {@link #valueField(String)}.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.KeyField(System.String)">
            <summary>
            The field name to use in order to control where the hit will "fall into" within the range
            entries. Essentially, using the key field numeric value, the hit will be "rounded" into the relevant
            bucket controlled by the interval.
            </summary>
            <param name="keyField"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.ValueField(System.String)">
            <summary>
            The field name to use as the value of the hit to compute data based on values within the interval
            (for example, total).
            </summary>
            <param name="valueField"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.AddRange(System.Double,System.Double)">
            <summary>
            Adds a range entry with explicit from and to.
            </summary>
            <param name="from">The from range limit</param>
            <param name="to">The to range limit</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.AddUnboundedTo(System.Double)">
            <summary>
            Adds a range entry with explicit from and unbounded to.
            </summary>
            <param name="from">the from range limit, to is unbounded.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.AddUnboundedFrom(System.Double)">
            <summary>
            Adds a range entry with explicit to and unbounded from.
            </summary>
            <param name="to">The to range limit, from is unbounded.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.Global(System.Boolean)">
            <summary>
            Should the facet run in global mode (not bounded by the search query) or not (bounded by
            the search query). Defaults to <tt>false</tt>.
            </summary>
            <param name="global"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.Scope(System.String)">
            <summary>
            Marks the facet to run in a specific scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.FacetFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            An additional filter used to further filter down the set of documents the facet will run on.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeFacetBuilder.Nested(System.String)">
            <summary>
            Sets the nested path the facet will execute on. A match (root object) will then cause all the
            nested objects matching the path to be computed into the facet.
            </summary>
            <param name="nested"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeScriptFacetBuilder.Lang(System.String)">
            <summary>
            The language of the script.
            </summary>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeScriptFacetBuilder.Param(System.String,System.Object)">
            <summary>
             A parameter that will be passed to the script.
             </summary>
             <param name="name">The name of the script parameter.</param>
             <param name="value">The value of the script parameter.</param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeScriptFacetBuilder.AddRange(System.Double,System.Double)">
            <summary>
            Adds a range entry with explicit from and to.
            </summary>
            <param name="from">The from range limit</param>
            <param name="to">The to range limit</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeScriptFacetBuilder.AddUnboundedTo(System.Double)">
            <summary>
            Adds a range entry with explicit from and unbounded to.
            </summary>
            <param name="from">The from range limit, to is unbounded.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeScriptFacetBuilder.AddUnboundedFrom(System.Double)">
            <summary>
            Adds a range entry with explicit to and unbounded from.
            </summary>
            <param name="to">The to range limit, from is unbounded.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeScriptFacetBuilder.Global(System.Boolean)">
            <summary>
            Should the facet run in global mode (not bounded by the search query) or not (bounded by
            the search query). Defaults to <tt>false</tt>.
            </summary>
            <param name="global"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeScriptFacetBuilder.Scope(System.String)">
            <summary>
            Marks the facet to run in a specific scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeScriptFacetBuilder.FacetFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            An additional filter used to further filter down the set of documents the facet will run on.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.RangeScriptFacetBuilder.Nested(System.String)">
            <summary>
            Sets the nested path the facet will execute on. A match (root object) will then cause all the
            nested objects matching the path to be computed into the facet.
            </summary>
            <param name="nested"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalFacetBuilder.Fields(System.String[])">
            <summary>
            The fields the terms will be collected from.
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalFacetBuilder.Global(System.Boolean)">
            <summary>
            Should the facet run in global mode (not bounded by the search query) or not (bounded by
            the search query). Defaults to <tt>false</tt>.
            </summary>
            <param name="global"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalFacetBuilder.Scope(System.String)">
            <summary>
            Marks the facet to run in a specific scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalFacetBuilder.FacetFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            An additional filter used to further filter down the set of documents the facet will run on.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalFacetBuilder.Nested(System.String)">
            <summary>
            Sets the nested path the facet will execute on. A match (root object) will then cause all the
            nested objects matching the path to be computed into the facet.
            </summary>
            <param name="nested"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalScriptFacetBuilder.Lang(System.String)">
            <summary>
            The language of the script.
            </summary>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalScriptFacetBuilder.Param(System.String,System.Object)">
            <summary>
             Parameters for {@link #valueScript(string)} to improve performance when executing the same script with different parameters.
             </summary>
             <param name="name"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalScriptFacetBuilder.Global(System.Boolean)">
            <summary>
            Should the facet run in global mode (not bounded by the search query) or not (bounded by
            the search query). Defaults to <tt>false</tt>.
            </summary>
            <param name="global"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalScriptFacetBuilder.Scope(System.String)">
            <summary>
            Marks the facet to run in a specific scope.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalScriptFacetBuilder.FacetFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            An additional filter used to further filter down the set of documents the facet will run on.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.StatisticalScriptFacetBuilder.Nested(System.String)">
            <summary>
            Sets the nested path the facet will execute on. A match (root object) will then cause all the
            nested objects matching the path to be computed into the facet.
            </summary>
            <param name="nested"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.TermsStatsFacetBuilder.#ctor(System.String)">
            <summary>
            Constructs a new terms stats facet builder under the provided facet name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.TermsStatsFacetBuilder.Order(Nest.TermsStatsComparatorType)">
            <summary>
            The order by which to return the facets by. Defaults to COUNT.
            </summary>
            <param name="comparatorType"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.TermsStatsFacetBuilder.Size(System.Int32)">
            <summary>
            Sets the size of the result.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.TermsStatsFacetBuilder.AllTerms">
            <summary>
            Marks all terms to be returned, even ones with 0 counts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.TermsStatsFacetBuilder.ValueScript(System.String)">
            <summary>
            A value script to be executed (instead of value field) which results (numeric) will be used
            to compute the totals.
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.TermsStatsFacetBuilder.Script(System.String)">
            <summary>
            The language of the script.
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Facet.TermsStatsFacetBuilder.Param(System.String,System.Object)">
            <summary>
             A parameter that will be passed to the script.
             </summary>
             <param name="name">The name of the script parameter.</param>
             <param name="value">The value of the script parameter.</param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.MatchAllFilter">
            <summary>
            A filter that matches all documents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.LimitFilter(System.Int32)">
            <summary>
            A filter that limits the results to the provided limit value (per shard!).
            </summary>
            <param name="limit">The limit</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.NestedFilter(System.String,Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.NestedFilter(System.String,Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.IdsFilter(System.String[])">
            <summary>
            Creates a new ids filter with the provided doc/mapping types.
            </summary>
            <param name="types">The types to match the ids against.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TypeFilter(System.String)">
            <summary>
            A filter based on doc/mapping type.
            </summary>
            <param name="type">The field type</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermFilter(System.String,System.String)">
            <summary>
            A filter for a field based on a term.
            </summary>
            <param name="name">The field name</param>
            <param name="value">The term value</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermFilter(System.String,System.Int32)">
            <summary>
            A filter for a field based on a term.
            </summary>
            <param name="name">The field name</param>
            <param name="value">The term value</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermFilter(System.String,System.Int64)">
            <summary>
            A filter for a field based on a term.
            </summary>
            <param name="name">The field name</param>
            <param name="value">The term value</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermFilter(System.String,System.Single)">
            <summary>
            A filter for a field based on a term.
            </summary>
            <param name="name">The field name</param>
            <param name="value">The term value</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermFilter(System.String,System.Double)">
            <summary>
            A filter for a field based on a term.
            </summary>
            <param name="name">The field name</param>
            <param name="value">The term value</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermFilter(System.String,System.Object)">
            <summary>
            A filter for a field based on a term.
            </summary>
            <param name="name">The field name</param>
            <param name="value">The term value</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermsFilter(System.String,System.String[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermsFilter(System.String,System.Int32[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermsFilter(System.String,System.Int64[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermsFilter(System.String,System.Single[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermsFilter(System.String,System.Double[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.TermsFilter(System.String,System.Object[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.InFilter(System.String,System.String[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.InFilter(System.String,System.Int32[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.InFilter(System.String,System.Int64[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.InFilter(System.String,System.Single[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.InFilter(System.String,System.Double[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.InFilter(System.String,System.Object[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.PrefixFilter(System.String,System.String)">
            <summary>
            A filter that restricts search results to values that have a matching prefix in a given field.
            </summary>
            <param name="name">The field name</param>
            <param name="prefix">The prefix</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.RangeFilter(System.String)">
            <summary>
            A filter that restricts search results to values that are within the given range.
            </summary>
            <param name="name">The field name</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.NumericRangeFilter(System.String)">
            <summary>
            A filter that restricts search results to values that are within the given numeric range. Uses the field data cache (loading all the values for the specified field into memory)
            </summary>
            <param name="name">The field name</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.QueryFilter(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            A filter that simply wraps a query.
            </summary>
            <param name="queryBuilder">The query to wrap as a filter</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.ScriptFilter(System.String)">
            <summary>
            A builder for filter based on a script.
            </summary>
            <param name="script">The script to filter by</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.GeoDistanceFilter(System.String)">
            <summary>
            A filter to filter based on a specific distance from a specific geo location / point.
            </summary>
            <param name="name">The location field name</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.GeoDistanceRangeFilter(System.String)">
            <summary>
            A filter to filter based on a specific range from a specific geo location / point.
            </summary>
            <param name="name">The location field name</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.GeoBoundingBoxFilter(System.String)">
            <summary>
            A filter to filter based on a bounding box defined by top left and bottom right locations / points
            </summary>
            <param name="name">The location field name</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.GeoPolygonFilter(System.String)">
            <summary>
            A filter to filter based on a polygon defined by a set of locations  / points.
            </summary>
            <param name="name">The location field name</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.ExistsFilter(System.String)">
            <summary>
            A filter to filter only documents where a field exists in them.
            </summary>
            <param name="name">The name of the field</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.MissingFilter(System.String)">
            <summary>
            A filter to filter only documents where a field does not exists in them.
            </summary>
            <param name="name">The name of the field</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.HasChildFilter(System.String,Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            Constructs a child filter, with the child type and the query to run against child documents, with
            the result of the filter being the *parent* documents.
            </summary>
            <param name="type">The child type</param>
            <param name="query">The query to run against the child type</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.BoolFilter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.AndFilter(Nest.FactoryDsl.Filter.IFilterBuilder[])">
            <summary>
            
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.OrFilter(Nest.FactoryDsl.Filter.IFilterBuilder[])">
            <summary>
            
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.FilterFactory.NotFilter(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.GeoDistanceRangeFilterBuilder.FilterName(System.String)">
            <summary>
            Sets the filter name for the filter that can be used when searching for matched_filters per hit.
            </summary>
            <param name="filterName"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.GeoDistanceRangeFilterBuilder.Cache(System.Boolean)">
            <summary>
            Should the filter be cached or not. Defaults to false.
            </summary>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.GeoPolygonFilterBuilder.AddPoint(System.Double,System.Double)">
            <summary>
            Adds a point with lat and lon
            </summary>
            <param name="lat">The latitude</param>
            <param name="lon">The longitude</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.GeoPolygonFilterBuilder.FilterName(System.String)">
            <summary>
            Sets the filter name for the filter that can be used when searching for matched_filters per hit.
            </summary>
            <param name="filterName"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.GeoPolygonFilterBuilder.Cache(System.Boolean)">
            <summary>
            Should the filter be cached or not. Defaults to false.
            </summary>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.HasChildFilterBuilder.FilterName(System.String)">
            <summary>
            Sets the filter name for the filter that can be used when searching for matched_filters per hit.
            </summary>
            <param name="filterName"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.IdsFilterBuilder.#ctor(System.String[])">
            <summary>
            Create an ids filter based on the type.
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.IdsFilterBuilder.AddIds(System.String[])">
            <summary>
            Adds ids to the filter.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.IdsFilterBuilder.Ids(System.String[])">
            <summary>
            Adds ids to the filter.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.IdsFilterBuilder.FilterName(System.String)">
            <summary>
            Sets the filter name for the filter that can be used when searching for matched_filters per hit.
            </summary>
            <param name="filterName"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.MissingFilterBuilder.FilterName(System.String)">
            <summary>
            Sets the filter name for the filter that can be used when searching for matched_filters per hit.
            </summary>
            <param name="filterName"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.#ctor(System.String)">
            <summary>
            A filter that restricts search results to values that are within the given range
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.From(System.Object)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.From(System.Int32)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.From(System.Int64)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.From(System.Single)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.From(System.Double)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Gt(System.Object)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Gt(System.Int32)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Gt(System.Int64)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Gt(System.Single)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Gt(System.Double)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Gte(System.Object)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Gte(System.Int32)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Gte(System.Int64)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Gte(System.Single)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Gte(System.Double)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.To(System.Object)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.To(System.Int32)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.To(System.Single)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.To(System.Int64)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.To(System.Double)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Lt(System.Object)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Lt(System.Int32)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Lt(System.Int64)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Lt(System.Single)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Lt(System.Double)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Lte(System.Object)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Lte(System.Int32)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Lte(System.Single)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Lte(System.Int64)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.Lte(System.Double)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.IncludeLower(System.Boolean)">
            <summary>
            Should the lower bound be included or not. Defaults to true.
            </summary>
            <param name="includeLower"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.NumericRangeFilterBuilder.IncludeUpper(System.Boolean)">
            <summary>
            Should the upper bound be included or not. Defaults to true.
            </summary>
            <param name="includeUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.OrFilterBuilder.Add(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            Adds a filter to the list of filters to "or".
            </summary>
            <param name="filterBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.OrFilterBuilder.Cache(System.Boolean)">
            <summary>
            Should the filter be cached or not. Defaults to false.
            </summary>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.#ctor(System.String)">
            <summary>
            A filter that restricts search results to values that are within the given range.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.From(System.Object)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.From(System.Int32)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.From(System.Int64)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.From(System.Single)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.From(System.Double)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Gt(System.Object)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Gt(System.Int32)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Gt(System.Int64)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Gt(System.Single)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Gt(System.Double)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Gte(System.Object)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Gte(System.Int32)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Gte(System.Int64)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Gte(System.Single)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Gte(System.Double)">
            <summary>
            The from part of the filter query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.To(System.Object)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.To(System.Int32)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.To(System.Single)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.To(System.Int64)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.To(System.Double)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Lt(System.Object)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Lt(System.Int32)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Lt(System.Int64)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Lt(System.Single)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Lt(System.Double)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Lte(System.Object)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Lte(System.Int32)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Lte(System.Single)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Lte(System.Int64)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Lte(System.Double)">
            <summary>
            The to part of the filter query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.IncludeLower(System.Boolean)">
            <summary>
            Should the lower bound be included or not. Defaults to true.
            </summary>
            <param name="includeLower"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.IncludeUpper(System.Boolean)">
            <summary>
            Should the upper bound be included or not. Defaults to true.
            </summary>
            <param name="includeUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.FilterName(System.String)">
            <summary>
            Sets the filter name for the filter that can be used when searching for matched_filters per hit.
            </summary>
            <param name="filterName"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.RangeFilterBuilder.Cache(System.Boolean)">
            <summary>
            Should the filter be cached or not. Defaults to true.
            </summary>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.ScriptFilterBuilder.Lang(System.String)">
            <summary>
            Sets the script language.
            </summary>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.TermsFilterBuilder.#ctor(System.String,System.String[])">
            <summary>
            A filter for a field based on several terms matching on any of them.
            </summary>
            <param name="name"></param>
            <param name="values"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.TermsFilterBuilder.#ctor(System.String,System.Int32[])">
            <summary>
            A filter for a field based on several terms matching on any of them.
            </summary>
            <param name="name"></param>
            <param name="values"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.TermsFilterBuilder.#ctor(System.String,System.Int64[])">
            <summary>
            A filter for a field based on several terms matching on any of them.
            </summary>
            <param name="name"></param>
            <param name="values"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.TermsFilterBuilder.#ctor(System.String,System.Double[])">
            <summary>
            A filter for a field based on several terms matching on any of them.
            </summary>
            <param name="name"></param>
            <param name="values"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.TermsFilterBuilder.#ctor(System.String,System.Single[])">
            <summary>
            A filter for a field based on several terms matching on any of them.
            </summary>
            <param name="name"></param>
            <param name="values"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.TermsFilterBuilder.#ctor(System.String,System.Object[])">
            <summary>
            A filter for a field based on several terms matching on any of them.
            </summary>
            <param name="name"></param>
            <param name="values"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.TermsFilterBuilder.Execution(System.String)">
            <summary>
            Sets the execution mode for the terms filter. Can be either "plain", "bool"
            "and". Defaults to "plain".
            </summary>
            <param name="execution"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Filter.TermsFilterBuilder.Cache(System.Boolean)">
            <summary>
            Should the filter be cached or not. Defaults to <tt>false</tt>.
            </summary>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.HighlightBuilder.Field(System.String)">
            <summary>
            Adds a field to be highlighted with default fragment size of 100 characters, and
            default number of fragments of 5 using the default encoder
            </summary>
            <param name="name">The field to highlight</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.HighlightBuilder.Field(System.String,System.Int32)">
            <summary>
            Adds a field to be highlighted with a provided fragment size (in characters), and
            default number of fragments of 5.
            </summary>
            <param name="name">The field to highlight</param>
            <param name="fragmentSize">The size of a fragment in characters</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.HighlightBuilder.Field(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a field to be highlighted with a provided fragment size (in characters), and
            a provided (maximum) number of fragments.
            </summary>
            <param name="name">The field to highlight</param>
            <param name="fragmentSize">The size of a fragment in characters</param>
            <param name="numberOfFragments">The (maximum) number of fragments</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.HighlightBuilder.Field(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a field to be highlighted with a provided fragment size (in characters), and
            a provided (maximum) number of fragments.
            </summary>
            <param name="name">The field to highlight</param>
            <param name="fragmentSize">The size of a fragment in characters</param>
            <param name="numberOfFragments">The (maximum) number of fragments</param>
            <param name="fragmentOffset">The offset from the start of the fragment to the start of the highlight</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.HighlightBuilder.TagsSchema(System.String)">
            <summary>
            Set a tag scheme that encapsulates a built in pre and post tags. The allows schemes
            are <tt>styled</tt> and <tt>default</tt>.
            </summary>
            <param name="schemaName">The tag scheme name</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.HighlightBuilder.Encoder(System.String)">
            <summary>
            Set encoder for the highlighting
            are <tt>styled</tt> and <tt>default</tt>.
            </summary>
            <param name="encoder">Encoder name</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.HighlightBuilder.PreTags(System.String[])">
            <summary>
            Explicitly set the pre tags that will be used for highlighting.
            </summary>
            <param name="preTags"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.HighlightBuilder.PostTags(System.String[])">
            <summary>
            Explicitly set the post tags that will be used for highlighting.
            </summary>
            <param name="postTags"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.HighlightBuilder.Order(System.String)">
            <summary>
            The order of fragments per field. By default, ordered by the order in the
            highlighted text. Can be <tt>score</tt>, which then it will be ordered
            by score of the fragments.
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.MatchAllQuery">
            <summary>
            A query that match on all documents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TextQuery(System.String,System.Object)">
            <summary>
             Creates a text query with type "BOOLEAN" for the provided field name and text.
            </summary>
            <param name="name">The field name.</param>
            <param name="text">The query text (to be analyzed).</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TextPhraseQuery(System.String,System.Object)">
            <summary>
            Creates a text query with type "PHRASE" for the provided field name and text.
            </summary>
            <param name="name">The field name.</param>
            <param name="text">The query text (to be analyzed).</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TextPhrasePrefixQuery(System.String,System.Object)">
            <summary>
            Creates a text query with type "PHRASE_PREFIX" for the provided field name and text.
            </summary>
            <param name="name">The field name.</param>
            <param name="text">The query text (to be analyzed).</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.DisMaxQuery">
            <summary>
            A query that generates the union of documents produced by its sub-queries, and that scores each document
            with the maximum score for that document as produced by any sub-query, plus a tie breaking increment for any
            additional matching sub-queries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.IdsQuery(System.String[])">
            <summary>
            Constructs a query that will match only specific ids within types.
            </summary>
            <param name="types">The mapping/doc type</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermQuery(System.String,System.String)">
            <summary>
            A Query that matches documents containing a term.
            </summary>
            <param name="name">The name of the field</param>
            <param name="value">The value of the term</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermQuery(System.String,System.Int32)">
            <summary>
            A Query that matches documents containing a term.
            </summary>
            <param name="name">The name of the field</param>
            <param name="value">The value of the term</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermQuery(System.String,System.Int64)">
            <summary>
            A Query that matches documents containing a term.
            </summary>
            <param name="name">The name of the field</param>
            <param name="value">The value of the term</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermQuery(System.String,System.Single)">
            <summary>
            A Query that matches documents containing a term.
            </summary>
            <param name="name">The name of the field</param>
            <param name="value">The value of the term</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermQuery(System.String,System.Double)">
            <summary>
            A Query that matches documents containing a term.
            </summary>
            <param name="name">The name of the field</param>
            <param name="value">The value of the term</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermQuery(System.String,System.Boolean)">
            <summary>
            A Query that matches documents containing a term.
            </summary>
            <param name="name">The name of the field</param>
            <param name="value">The value of the term</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermQuery(System.String,System.Object)">
            <summary>
            A Query that matches documents containing a term.
            </summary>
            <param name="name">The name of the field</param>
            <param name="value">The value of the term</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FuzzyQuery(System.String,System.String)">
            <summary>
            A Query that matches documents using fuzzy query.
            </summary>
            <param name="name">The name of the field</param>
            <param name="value">The value of the term</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FieldQuery(System.String,System.String)">
            <summary>
            A query that executes the query string against a field. It is a simplified
            version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
            </summary>
            <param name="name">The name of the field</param>
            <param name="query">The query string</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FieldQuery(System.String,System.Int32)">
            <summary>
            A query that executes the query string against a field. It is a simplified
            version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
            </summary>
            <param name="name">The name of the field</param>
            <param name="query">The query string</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FieldQuery(System.String,System.Int64)">
            <summary>
            A query that executes the query string against a field. It is a simplified
            version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
            </summary>
            <param name="name">The name of the field</param>
            <param name="query">The query string</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FieldQuery(System.String,System.Single)">
            <summary>
            A query that executes the query string against a field. It is a simplified
            version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
            </summary>
            <param name="name">The name of the field</param>
            <param name="query">The query string</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FieldQuery(System.String,System.Double)">
            <summary>
            A query that executes the query string against a field. It is a simplified
            version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
            </summary>
            <param name="name">The name of the field</param>
            <param name="query">The query string</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FieldQuery(System.String,System.Boolean)">
            <summary>
            A query that executes the query string against a field. It is a simplified
            version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
            </summary>
            <param name="name">The name of the field</param>
            <param name="query">The query string</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FieldQuery(System.String,System.Object)">
            <summary>
            A query that executes the query string against a field. It is a simplified
            version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
            </summary>
            <param name="name">The name of the field</param>
            <param name="query">The query string</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.PrefixQuery(System.String,System.String)">
            <summary>
            A Query that matches documents containing terms with a specified prefix.
            </summary>
            <param name="name">The name of the field</param>
            <param name="prefix">The prefix query</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.RangeQuery(System.String)">
            <summary>
            A Query that matches documents within an range of terms.
            </summary>
            <param name="name">The field name</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.WildcardQuery(System.String,System.String)">
            <summary>
            Implements the wildcard search query. Supported wildcards are <tt>*</tt>, which
            matches any character sequence (including the empty one), and <tt>?</tt>,
            which matches any single character. Note this query can be slow, as it
            needs to iterate over many terms. In order to prevent extremely slow WildcardQueries,
            a Wildcard term should not start with one of the wildcards <tt>*</tt> or
            <tt>?</tt>.
            </summary>
            <param name="name">The field name</param>
            <param name="query">The wildcard query string</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.QueryString(System.String)">
            <summary>
            A query that parses a query string and runs it. There are two modes that this operates. The first,
            when no field is added (using {@link QueryStringQueryBuilder#field(String)}, will run the query once and non prefixed fields
            will use the {@link QueryStringQueryBuilder#defaultField(String)} set. The second, when one or more fields are added
            (using {@link QueryStringQueryBuilder#field(String)}), will run the parsed query against the provided fields, and combine
            them either using DisMax or a plain boolean query (see {@link QueryStringQueryBuilder#useDisMax(boolean)}).
            </summary>
            <param name="queryString">The query string to run</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.BoostingQuery">
            <summary>
            The BoostingQuery class can be used to effectively demote results that match a given query.
            Unlike the "NOT" clause, this still selects documents that contain undesirable terms,
            but reduces their overall score:
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.BoolQuery">
            <summary>
            A Query that matches documents matching boolean combinations of other queries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FilteredQuery(Nest.FactoryDsl.Query.IQueryBuilder,Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            A query that applies a filter to the results of another query.
            </summary>
            <param name="queryBuilder">The query to apply the filter to</param>
            <param name="filterBuilder">The filter to apply on the query</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.ConstantScoreQuery(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            A query that wraps a filter and simply returns a constant score equal to the
            query boost for every document in the filter.
            </summary>
            <param name="filterBuilder">The filter to wrap in a constant score query</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.CustomBoostFactorQuery(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            A query that simply applies the boost fact to the wrapped query (multiplies it).
            </summary>
            <param name="queryBuilder">The query to apply the boost factor to.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.CustomScoreQuery(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            A query that allows to define a custom scoring script.
            </summary>
            <param name="queryBuilder">The query to custom score</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.MoreLikeThisQuery(System.String[])">
            <summary>
            A more like this query that finds documents that are "like" the provided {@link MoreLikeThisQueryBuilder#likeText(String)}
            which is checked against the fields the query is constructed with.
            </summary>
            <param name="fields">The fields to run the query against</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.MoreLikeThisQuery">
            <summary>
            A more like this query that finds documents that are "like" the provided {@link MoreLikeThisQueryBuilder#likeText(String)}
            which is checked against the "_all" field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FuzzyLikeThisQuery(System.String[])">
            <summary>
            A fuzzy like this query that finds documents that are "like" the provided {@link FuzzyLikeThisQueryBuilder#likeText(String)}
            which is checked against the fields the query is constructed with.
            </summary>
            <param name="fields">The fields to run the query against</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FuzzyLikeThisQuery">
            <summary>
            A fuzzy like this query that finds documents that are "like" the provided {@link FuzzyLikeThisQueryBuilder#likeText(String)}
            which is checked against the "_all" field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.FuzzyLikeThisFieldQuery(System.String)">
            <summary>
            A fuzzy like this query that finds documents that are "like" the provided {@link FuzzyLikeThisFieldQueryBuilder#likeText(String)}.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.IndicesQuery(Nest.FactoryDsl.Query.IQueryBuilder,System.String[])">
            <summary>
            A query that will execute the wrapped query only for the specified indices, and "match_all" when
            it does not match those indices.
            </summary>
            <param name="queryBuilder"></param>
            <param name="indices"> </param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.MoreLikeThisFieldQuery(System.String)">
            <summary>
            A more like this query that runs against a specific field.
            </summary>
            <param name="name">The field name</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TopChildrenQuery(System.String,Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            Constructs a new scoring child query, with the child type and the query to run on the child documents. The
            results of this query are the parent docs that those child docs matched.
            </summary>
            <param name="type">The child type</param>
            <param name="query">The query</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.HasChildQuery(System.String,Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            Constructs a new NON scoring child query, with the child type and the query to run on the child documents. The
            results of this query are the parent docs that those child docs matched.
            </summary>
            <param name="type">The child type.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermsQuery(System.String,System.String[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermsQuery(System.String,System.Int32[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermsQuery(System.String,System.Int64[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermsQuery(System.String,System.Single[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermsQuery(System.String,System.Double[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.TermsQuery(System.String,System.Object[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.InQuery(System.String,System.String[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.InQuery(System.String,System.Int32[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.InQuery(System.String,System.Int64[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.InQuery(System.String,System.Single[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.InQuery(System.String,System.Double[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.InQuery(System.String,System.Object[])">
            <summary>
            A filer for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.InQuery(System.String,System.String)">
            <summary>
            A filter that restricts search results to values that have a matching prefix in a given
            field.
            </summary>
            <param name="name">The field name</param>
            <param name="prefix">The prefix</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.WrapperQuery(System.String)">
            <summary>
            A Query builder which allows building a query thanks to a JSON string or binary data.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.QueryFactory.WrapperQuery(System.Byte[],System.Int32,System.Int32)">
            <summary>
            A Query builder which allows building a query thanks to a JSON string or binary data.
            </summary>
            <param name="source"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.BoolQueryBuilder">
            <summary>
            A Query that matches documents matching boolean combinations of other queries.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.BoolQueryBuilder.Must(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            Adds a query that <b>must</b> appear in the matching documents.
            </summary>
            <param name="queryBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.BoolQueryBuilder.MustNot(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            Adds a query that <b>must not</b> appear in the matching documents.
            </summary>
            <param name="queryBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.BoolQueryBuilder.Should(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            Adds a query that <i>should</i> appear in the matching documents. For a boolean query with no
            <tt>MUST</tt> clauses one or more <code>SHOULD</code> clauses must match a document
            for the BooleanQuery to match.
            </summary>
            <param name="queryBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.BoolQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.BoolQueryBuilder.DisableCoord(System.Boolean)">
            <summary>
            Disables <tt>Similarity#coord(int,int)</tt> in scoring. Defaults to <tt>false</tt>.
            </summary>
            <param name="disableCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.BoolQueryBuilder.MinimumNumberShouldMatch(System.Int32)">
             <summary>
             Specifies a minimum number of the optional (should) boolean clauses which must be satisfied.
             By default no optional clauses are necessary for a match
             (unless there are no required clauses). If this method is used,
             then the specified number of clauses is required.
            
             Use of this method is totally independent of specifying that
             any specific clauses are required (or prohibited).  This number will
             only be compared against the number of matching optional clauses.
            
             minimumNumberShouldMatch the number of optional clauses that must match
             </summary>
             <param name="minimumNumberShouldMatch"></param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.BoolQueryBuilder.HasClauses">
            <summary>
            Return <code>true</code> if the query being built has no clause yet.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.BoostingQueryBuilder">
             <summary>
             The BoostingQuery class can be used to effectively demote results that match a given query.
             Unlike the "NOT" clause, this still selects documents that contain undesirable terms,
             but reduces their overall score:
            
             Query balancedQuery = new BoostingQuery(positiveQuery, negativeQuery, 0.01f);
             In this scenario the positiveQuery contains the mandatory, desirable criteria which is used to
             select all matching documents, and the negativeQuery contains the undesirable elements which
             are simply used to lessen the scores. Documents that match the negativeQuery have their score
             multiplied by the supplied "boost" parameter, so this should be less than 1 to achieve a
             demoting effect
             </summary>
        </member>
        <member name="T:Nest.FactoryDsl.Query.ConstantScoreQueryBuilder">
            <summary>
            A query that wraps a filter and simply returns a constant score equal to the
            query boost for every document in the filter.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.ConstantScoreQueryBuilder.#ctor(Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            A query that wraps a filter and simply returns a constant score equal to the
            query boost for every document in the filter.
            </summary>
            <param name="filterBuilder">The filter to wrap in a constant score query</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.ConstantScoreQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.CustomBoostFactorQueryBuilder">
            <summary>
            A query that simply applies the boost factor to another query (multiply it).
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomBoostFactorQueryBuilder.#ctor(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            A query that simply applies the boost factor to another query (multiply it).
            </summary>
            <param name="queryBuilder">The query to apply the boost factor to.</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomBoostFactorQueryBuilder.BoostFactor(System.Single)">
            <summary>
            Sets the boost factor for this query.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.CustomFiltersScoreQueryBuilder">
            <summary>
            A query that uses a filters with a script associated with them to compute the score.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomFiltersScoreQueryBuilder.Lang(System.String)">
            <summary>
            Sets the language of the script.
            </summary>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomFiltersScoreQueryBuilder.Params(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Additional parameters that can be provided to the script.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomFiltersScoreQueryBuilder.Param(System.String,System.Object)">
            <summary>
            Additional parameters that can be provided to the script.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomFiltersScoreQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.CustomScoreQueryBuilder">
            <summary>
            A query that uses a script to compute the score.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomScoreQueryBuilder.#ctor(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            A query that simply applies the boost factor to another query (multiply it).
            </summary>
            <param name="queryBuilder">The query to apply the boost factor to.</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomScoreQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomScoreQueryBuilder.Lang(System.String)">
            <summary>
            Sets the language of the script.
            </summary>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomScoreQueryBuilder.Params(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Additional parameters that can be provided to the script.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.CustomScoreQueryBuilder.Param(System.String,System.Object)">
            <summary>
            Additional parameters that can be provided to the script.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.DisMaxQueryBuilder">
            <summary>
            A query that generates the union of documents produced by its sub-queries, and that scores each document
            with the maximum score for that document as produced by any sub-query, plus a tie breaking increment for any
            additional matching sub-queries.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.DisMaxQueryBuilder.Add(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            Add a sub-query to this disjunction.
            </summary>
            <param name="queryBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.DisMaxQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.DisMaxQueryBuilder.TieBreaker(System.Single)">
            <summary>
            The score of each non-maximum disjunct for a document is multiplied by this weight
            and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that
            10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique
            word in the lower scored field (i.e., one that is not in any higher scored field.
            </summary>
            <param name="tieBreaker"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.FieldQueryBuilder">
            <summary>
            A query that executes the query string against a field. It is a simplified
            version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.#ctor(System.String,System.String)">
             <summary>
             A query that executes the query string against a field. It is a simplified
             version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
             </summary>
             <param name="name">The name of the field</param>
             <param name="query">The query string</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.#ctor(System.String,System.Int32)">
             <summary>
             A query that executes the query string against a field. It is a simplified
             version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
             </summary>
             <param name="name">The name of the field</param>
             <param name="query">The query string</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.#ctor(System.String,System.Int64)">
             <summary>
             A query that executes the query string against a field. It is a simplified
             version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
             </summary>
             <param name="name">The name of the field</param>
             <param name="query">The query string</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.#ctor(System.String,System.Single)">
             <summary>
             A query that executes the query string against a field. It is a simplified
             version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
             </summary>
             <param name="name">The name of the field</param>
             <param name="query">The query string</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.#ctor(System.String,System.Double)">
             <summary>
             A query that executes the query string against a field. It is a simplified
             version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
             </summary>
             <param name="name">The name of the field</param>
             <param name="query">The query string</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.#ctor(System.String,System.Boolean)">
             <summary>
             A query that executes the query string against a field. It is a simplified
             version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
             </summary>
             <param name="name">The name of the field</param>
             <param name="query">The query string</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.#ctor(System.String,System.Object)">
             <summary>
             A query that executes the query string against a field. It is a simplified
             version of {@link QueryStringQueryBuilder} that simply runs against
            a single field.
             </summary>
             <param name="name">The name of the field</param>
             <param name="query">The query string</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.DefaultOperator(Nest.Operator)">
             <summary>
             Sets the boolean operator of the query parser used to parse the query string.
            
             <p>In default mode ({@link FieldQueryBuilder.Operator#OR}) terms without any modifiers
             are considered optional: for example <code>capital of Hungary</code> is equal to
             <code>capital OR of OR Hungary</code>.</p>
            
             <p>In {@link FieldQueryBuilder.Operator#AND} mode terms are considered to be in conjunction: the
             above mentioned query is parsed as <code>capital AND of AND Hungary</code></p>
             </summary>
             <param name="defaultOperator"></param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.Analyzer(System.String)">
            <summary>
            The optional analyzer used to analyze the query string. Note, if a field has search analyzer
            defined for it, then it will be used automatically. Defaults to the smart search analyzer.
            </summary>
            <param name="analyzer"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.AutoGeneratePhraseQueries(System.Boolean)">
            <summary>
            Set to true if phrase queries will be automatically generated
            when the analyzer returns more than one term from whitespace
            delimited text.
            NOTE: this behavior may not be suitable for all languages.
            Set to false if phrase queries should only be generated when
            surrounded by double quotes.
            </summary>
            <param name="autoGeneratePhraseQueries"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.AllowLeadingWildcard(System.Boolean)">
            <summary>
            Should leading wildcards be allowed or not. Defaults to <tt>true</tt>.
            </summary>
            <param name="allowLeadingWildcard"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.LowercaseExpandedTerms(System.Boolean)">
            <summary>
            Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically
            lower-cased or not.  Default is <tt>true</tt>.
            </summary>
            <param name="lowercaseExpandedTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.EnablePositionIncrements(System.Boolean)">
             Set to <tt>true</tt> to enable position increments in result query. Defaults to
             <tt>true</tt>.
            
             <p>When set, result phrase and multi-phrase queries will be aware of position increments.
             Useful when e.g. a StopFilter increases the position increment of the token that follows an omitted token.</p>
             <param name="enablePositionIncrements"></param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.FuzzyMinSim(System.Single)">
            <summary>
            Set the minimum similarity for fuzzy queries. Default is 0.5f.
            </summary>
            <param name="fuzzyMinSim"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.FuzzyPrefixLength(System.Int32)">
            <summary>
            Set the prefix length for fuzzy queries. Default is 0.
            </summary>
            <param name="fuzzyPrefixLength"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.PhraseSlop(System.Int32)">
            <summary>
            Sets the default slop for phrases.  If zero, then exact phrase matches
            are required. Default value is zero.
            </summary>
            <param name="phraseSlop"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FieldQueryBuilder.AnalyzeWildcard(System.Boolean)">
            <summary>
            Set to <tt>true</tt> to enable analysis on wildcard and prefix queries.
            </summary>
            <param name="analyzeWildcard"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FilteredQueryBuilder.#ctor(Nest.FactoryDsl.Query.IQueryBuilder,Nest.FactoryDsl.Filter.IFilterBuilder)">
            <summary>
            A query that applies a filter to the results of another query.
            </summary>
            <param name="queryBuilder">The query to apply the filter to</param>
            <param name="filterBuilder">The filter to apply on the query</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FilteredQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FuzzyLikeThisFieldQueryBuilder.#ctor(System.String)">
            <summary>
            A fuzzy more like this query on the provided field.
            </summary>
            <param name="name">The name of the field</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FuzzyLikeThisFieldQueryBuilder.LikeText(System.String)">
            <summary>
            The text to use in order to find documents that are "like" this.
            </summary>
            <param name="likeText"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FuzzyLikeThisFieldQueryBuilder.Analyzer(System.String)">
            <summary>
            The analyzer that will be used to analyze the text. Defaults to the analyzer associated with the field.
            </summary>
            <param name="analyzer"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FuzzyLikeThisQueryBuilder.#ctor">
            <summary>
            Constructs a new fuzzy like this query which uses the "_all" field.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FuzzyLikeThisQueryBuilder.#ctor(System.String[])">
            <summary>
            Sets the field names that will be used when generating the 'Fuzzy Like This' query.
            </summary>
            <param name="fields">The field names that will be used when generating the 'Fuzzy Like This' query.</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FuzzyLikeThisQueryBuilder.LikeText(System.String)">
            <summary>
            The text to use in order to find documents that are "like" this.
            </summary>
            <param name="likeText"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FuzzyLikeThisQueryBuilder.Analyzer(System.String)">
            <summary>
            The analyzer that will be used to analyze the text. Defaults to the analyzer associated with the fied.
            </summary>
            <param name="analyzer"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.FuzzyQueryBuilder">
            <summary>
            A Query that does fuzzy matching for a specific value.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FuzzyQueryBuilder.#ctor(System.String,System.Object)">
            <summary>
            Constructs a new term query.
            </summary>
            <param name="name">The name of the field</param>
            <param name="value">The value of the term</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.FuzzyQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.HasChildQueryBuilder.Scope(System.String)">
            <summary>
            The scope of the query, which can later be used, for example, to run facets against the child docs that
            matches the query.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.HasChildQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.IdsQueryBuilder">
            <summary>
            A query that will return only documents matching specific ids (and a type).
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.IdsQueryBuilder.AddIds(System.String[])">
            <summary>
            Adds ids to the filter.
            </summary>
            <param name="?"></param>
            <param name="ids"> </param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.IdsQueryBuilder.Ids(System.String[])">
            <summary>
            Adds ids to the filter.
            </summary>
            <param name="?"></param>
            <param name="ids"> </param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.IdsQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.IndicesQueryBuilder">
            <summary>
            A query that will execute the wrapped query only for the specified indices, and "match_all" when
            it does not match those indices (by default).
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.IndicesQueryBuilder.NoMatchQuery(System.String)">
            <summary>
            Sets the no match query, can either be <tt>all</tt> or <tt>none</tt>.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.IndicesQueryBuilder.NoMatchQuery(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            Sets the query to use when it executes on an index that does not match the indices provided.
            </summary>
            <param name="noMatchQuery"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder">
            <summary>
            A more like this query that runs against a specific field.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.#ctor(System.String)">
            <summary>
            A more like this query that runs against a specific field.
            </summary>
            <param name="name">The field name to run the query against</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.LikeText(System.String)">
            <summary>
            The text to use in order to find documents that are "like" this.
            </summary>
            <param name="likeText"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.PercentTermsToMatch(System.Single)">
            <summary>
            The percentage of terms to match. Defaults to <tt>0.3</tt>.
            </summary>
            <param name="percentTermsToMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.MinTermFreq(System.Int32)">
            <summary>
            The frequency below which terms will be ignored in the source doc. The default
            frequency is <tt>2</tt>.
            </summary>
            <param name="minTermFreqy"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.MaxQueryTerms(System.Int32)">
            <summary>
            Sets the maximum number of query terms that will be included in any generated query.
            Defaults to <tt>25</tt>.
            </summary>
            <param name="maxQueryTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.StopWords(System.String[])">
             <summary>
             Set the set of stopwords.
            
             <p>Any word in this set is considered "uninteresting" and ignored. Even if your Analyzer allows stopwords, you
             might want to tell the MoreLikeThis code to ignore them, as for the purposes of document similarity it seems
             reasonable to assume that "a stop word is never interesting".</p>
             </summary>
             <param name="stopWords"></param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.MinDocFreq(System.Int32)">
            <summary>
            Sets the frequency at which words will be ignored which do not occur in at least this
            many docs. Defaults to <tt>5</tt>.
            </summary>
            <param name="minDocFreq"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.MaxDocFreq(System.Int32)">
            <summary>
            Set the maximum frequency in which words may still appear. Words that appear
            in more than this many docs will be ignored. Defaults to unbounded.
            </summary>
            <param name="maxDocFreq"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.MinWordLen(System.Int32)">
            <summary>
            Sets the minimum word length below which words will be ignored. Defaults
            to <tt>0</tt>.
            </summary>
            <param name="minWordLen"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.MaxWordLen(System.Int32)">
            <summary>
            Sets the maximum word length above which words will be ignored. Defaults to
            unbounded (<tt>0</tt>).
            </summary>
            <param name="maxWordLen"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.BoostTerms(System.Single)">
            <summary>
            Sets the boost factor to use when boosting terms. Defaults to <tt>1</tt>.
            </summary>
            <param name="boostTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisFieldQueryBuilder.Analyzer(System.String)">
            <summary>
            The analyzer that will be used to analyze the text. Defaults to the analyzer associated with the fied.
            </summary>
            <param name="analyzer"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder">
            <summary>
            A more like this query that finds documents that are "like" the provided {@link #likeText(String)}
            which is checked against the fields the query is constructed with.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.#ctor">
            <summary>
            Constructs a new more like this query which uses the "_all" field.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.#ctor(System.String[])">
            <summary>
            Sets the field names that will be used when generating the 'More Like This' query.
            </summary>
            <param name="fields">The field names that will be used when generating the 'More Like This' query.</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.LikeText(System.String)">
            <summary>
            The text to use in order to find documents that are "like" this.
            </summary>
            <param name="likeText"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.PercentTermsToMatch(System.Single)">
            <summary>
            The percentage of terms to match. Defaults to <tt>0.3</tt>.
            </summary>
            <param name="percentTermsToMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.MinTermFreq(System.Int32)">
            <summary>
            The frequency below which terms will be ignored in the source doc. The default
            frequency is <tt>2</tt>.
            </summary>
            <param name="minTermFreq"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.MaxQueryTerms(System.Int32)">
            <summary>
            Sets the maximum number of query terms that will be included in any generated query.
            Defaults to <tt>25</tt>.
            </summary>
            <param name="maxQueryTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.StopWords(System.String[])">
             <summary>
             Set the set of stopwords.
            
             <p>Any word in this set is considered "uninteresting" and ignored. Even if your Analyzer allows stopwords, you
             might want to tell the MoreLikeThis code to ignore them, as for the purposes of document similarity it seems
             reasonable to assume that "a stop word is never interesting"</p>
             </summary>
             <param name="stopWords"></param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.MinDocFreq(System.Int32)">
            <summary>
            Sets the frequency at which words will be ignored which do not occur in at least this
            many docs. Defaults to <tt>5</tt>.
            </summary>
            <param name="minDocFreq"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.MaxDocFreq(System.Int32)">
            <summary>
            Set the maximum frequency in which words may still appear. Words that appear
            in more than this many docs will be ignored. Defaults to unbounded.
            </summary>
            <param name="maxDocFreq"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.MinWordLen(System.Int32)">
            <summary>
            Sets the minimum word length below which words will be ignored. Defaults
            to <tt>0</tt>.
            </summary>
            <param name="minWordLen"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.MaxWordLen(System.Int32)">
            <summary>
            Sets the maximum word length above which words will be ignored. Defaults to
            unbounded (<tt>0</tt>).
            </summary>
            <param name="maxWordLen"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.BoostTerms(System.Single)">
            <summary>
            Sets the boost factor to use when boosting terms. Defaults to <tt>1</tt>.
            </summary>
            <param name="boostTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.MoreLikeThisQueryBuilder.Analyzer(System.String)">
            <summary>
            The analyzer that will be used to analyze the text. Defaults to the analyzer associated with the fied.
            </summary>
            <param name="analyzer"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.NestedQueryBuilder.ScoreMode(System.String)">
            <summary>
            The score mode.
            </summary>
            <param name="scoreMode"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.NestedQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.PrefixQueryBuilder">
            <summary>
            A Query that matches documents containing terms with a specified prefix.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.PrefixQueryBuilder.#ctor(System.String,System.String)">
            <summary>
            A Query that matches documents containing terms with a specified prefix.
            </summary>
            <param name="name">The name of the field</param>
            <param name="prefix">The prefix query</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.PrefixQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.QueryStringQueryBuilder">
            <summary>
            A query that parses a query string and runs it. There are two modes that this operates. The first,
            when no field is added (using {@link #field(string)}, will run the query once and non prefixed fields
            will use the {@link #defaultField(string)} set. The second, when one or more fields are added
            (using {@link #field(string)}), will run the parsed query against the provided fields, and combine
            them either using DisMax or a plain boolean query (see {@link #useDisMax(boolean)}).
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.DefaultField(System.String)">
            <summary>
            The default field to run against when no prefix field is specified. Only relevant when
            not explicitly adding fields the query string will run against.
            </summary>
            <param name="defaultField"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.Field(System.String)">
            <summary>
            Adds a field to run the query string against.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.Field(System.String,System.Single)">
            <summary>
            Adds a field to run the query string against with a specific boost.
            </summary>
            <param name="field"></param>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.UseDisMax(System.Boolean)">
            <summary>
            When more than one field is used with the query string, should queries be combined using
            dis max, or boolean query. Defaults to dis max (<tt>true</tt>).
            </summary>
            <param name="useDisMax"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.TieBreaker(System.Single)">
            <summary>
            When more than one field is used with the query string, and combined queries are using
            dis max, control the tie breaker for it.
            </summary>
            <param name="tieBreaker"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.DefaultOperator(Nest.Operator)">
             <summary>
             Sets the boolean operator of the query parser used to parse the query string.
            
             In default mode ({@link FieldQueryBuilder.Operator#OR}) terms without any modifiers
             are considered optional: for example <code>capital of Hungary</code> is equal to
             <code>capital OR of OR Hungary</code>.
            
             In {@link FieldQueryBuilder.Operator#AND} mode terms are considered to be in conjunction: the
             above mentioned query is parsed as <code>capital AND of AND Hungary</code>
             </summary>
             <param name="defaultOperator"></param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.Analyzer(System.String)">
            <summary>
            The optional analyzer used to analyze the query string. Note, if a field has search analyzer
            defined for it, then it will be used automatically. Defaults to the smart search analyzer.
            </summary>
            <param name="analyzer"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.AutoGeneratePhraseQueries(System.Boolean)">
            <summary>
            Set to true if phrase queries will be automatically generated
            when the analyzer returns more than one term from whitespace
            delimited text.
            NOTE: this behavior may not be suitable for all languages.
            
            Set to false if phrase queries should only be generated when
            surrounded by double quotes.
            </summary>
            <param name="autoGeneratePhraseQueries"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.AllowLeadingWildcard(System.Boolean)">
            <summary>
            Should leading wildcards be allowed or not. Defaults to <tt>true</tt>.
            </summary>
            <param name="allowLeadingWildcard"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.LowercaseExpandedTerms(System.Boolean)">
            <summary>
            Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically
            lower-cased or not.  Default is <tt>true</tt>.
            </summary>
            <param name="lowercaseExpandedTerms"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.EnablePositionIncrements(System.Boolean)">
             <summary>
             Set to <tt>true</tt> to enable position increments in result query. Defaults to
             <tt>true</tt>.
            
             When set, result phrase and multi-phrase queries will be aware of position increments.
             Useful when e.g. a StopFilter increases the position increment of the token that follows an omitted token.
             </summary>
             <param name="enablePositionIncrements"></param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.FuzzyMinSim(System.Single)">
            <summary>
            Set the minimum similarity for fuzzy queries. Default is 0.5f.
            </summary>
            <param name="fuzzyMinSim"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.FuzzyPrefixLength(System.Int32)">
            <summary>
             Set the minimum similarity for fuzzy queries. Default is 0.5f.
            </summary>
            <param name="fuzzyPrefixLength"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.PhraseSlop(System.Int32)">
            <summary>
            Sets the default slop for phrases.  If zero, then exact phrase matches
            are required. Default value is zero.
            </summary>
            <param name="phraseSlop"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.AnalyzeWildcard(System.Boolean)">
            <summary>
            Set to <tt>true</tt> to enable analysis on wildcard and prefix queries.
            </summary>
            <param name="analyzeWildcard"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.QueryStringQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
             weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.RangeQueryBuilder">
            <summary>
            A Query that matches documents within an range of terms.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.#ctor(System.String)">
            <summary>
            A Query that matches documents within an range of terms.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.From(System.Object)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.From(System.String)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.From(System.Int32)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.From(System.Int64)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.From(System.Single)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.From(System.Double)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gt(System.Object)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gt(System.String)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gt(System.Int32)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gt(System.Int64)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gt(System.Single)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gt(System.Double)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gte(System.Object)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gte(System.String)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gte(System.Int32)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gte(System.Int64)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gte(System.Single)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Gte(System.Double)">
            <summary>
            The from part of the range query. Null indicates unbounded.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.To(System.Object)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.To(System.String)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.To(System.Int32)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.To(System.Single)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.To(System.Int64)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.To(System.Double)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lt(System.Object)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lt(System.String)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lt(System.Int32)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lt(System.Single)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lt(System.Int64)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lt(System.Double)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lte(System.Object)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lte(System.String)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lte(System.Int32)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lte(System.Single)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lte(System.Int64)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Lte(System.Double)">
            <summary>
            The to part of the range query. Null indicates unbounded.
            </summary>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.IncludeLower(System.Boolean)">
            <summary>
            Should the lower bound be included or not. Defaults to <tt>true</tt>.
            </summary>
            <param name="includeLower"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.IncludeUpper(System.Boolean)">
            <summary>
            Should the upper bound be included or not. Defaults to <tt>true</tt>.
            </summary>
            <param name="includeUpper"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.RangeQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.TermsQueryBuilder.#ctor(System.String,System.Object[])">
            <summary>
            A query for a field based on several terms matching on any of them.
            </summary>
            <param name="name">The field name</param>
            <param name="values">The terms</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.TermsQueryBuilder.MinimumMatch(System.Int32)">
            <summary>
            Sets the minimum number of matches across the provided terms. Defaults to <tt>1</tt>.
            </summary>
            <param name="minimumMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.TermsQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.TermsQueryBuilder.DisableCoord(System.Boolean)">
            <summary>
            Disables <tt>Similarity#coord(int,int)</tt> in scoring. Defualts to <tt>false</tt>.
            </summary>
            <param name="disableCoord"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.TopChildrenQueryBuilder.Scope(System.String)">
            <summary>
            The scope of the query, which can later be used, for example, to run facets against the child docs that
            matches the query.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.TopChildrenQueryBuilder.Score(System.String)">
            <summary>
            How to compute the score. Possible values are: <tt>max</tt>, <tt>sum</tt>, or <tt>avg</tt>. Defaults
            to <tt>max</tt>.
            </summary>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.TopChildrenQueryBuilder.Factor(System.Int32)">
            <summary>
            Controls the multiplication factor of the initial hits required from the child query over the main query request.
            Defaults to 5.
            </summary>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.TopChildrenQueryBuilder.IncrementalFactor(System.Int32)">
            <summary>
            Sets the incremental factor when the query needs to be re-run in order to fetch more results. Defaults to 2.
            </summary>
            <param name="incrementalFactor"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Query.TopChildrenQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.WildcardQueryBuilder">
            <summary>
            Implements the wildcard search query. Supported wildcards are <tt>*</tt>, which
            matches any character sequence (including the empty one), and <tt>?</tt>,
            which matches any single character. Note this query can be slow, as it
            needs to iterate over many terms. In order to prevent extremely slow WildcardQueries,
            a Wildcard term should not start with one of the wildcards <tt>*</tt> or
            <tt>?</tt>.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.WildcardQueryBuilder.#ctor(System.String,System.String)">
            <summary>
            Implements the wildcard search query. Supported wildcards are <tt>*</tt>, which
            matches any character sequence (including the empty one), and <tt>?</tt>,
            which matches any single character. Note this query can be slow, as it
            needs to iterate over many terms. In order to prevent extremely slow WildcardQueries,
            a Wildcard term should not start with one of the wildcards <tt>*</tt> or
            </summary>
            <param name="name">The field name</param>
            <param name="query">The wildcard query string</param>
        </member>
        <member name="M:Nest.FactoryDsl.Query.WildcardQueryBuilder.Boost(System.Single)">
            <summary>
            Sets the boost for this query.  Documents matching this query will (in addition to the normal
            weightings) have their score multiplied by the boost provided.
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Query.WrapperQueryBuilder">
            <summary>
            A Query builder which allows building a query thanks to a JSON string or binary data. This is useful when you want
            to use the Java Builder API but still have JSON query strings at hand that you want to combine with other
            query builders.
            
            Example usage in a boolean query :
            <pre>
            {@code
                 BoolQueryBuilder bool = new BoolQueryBuilder();
                 bool.must(new WrapperQueryBuilder("{\"term\": {\"field\":\"value\"}}");
                 bool.must(new TermQueryBuilder("field2","value2");
            }
            </pre>
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Query.WrapperQueryBuilder.#ctor(System.String)">
            <summary>
            Builds a JSONQueryBuilder using the provided JSON query string.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Nest.FactoryDsl.SearchBuilder">
            <summary>
            A search source builder allowing to easily build search source. Simple construction
            using {@link org.elasticsearch.search.builder.SearchSourceBuilder#searchSource()}.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.SearchSource">
            <summary>
             A static factory method to construct a new search source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Builder">
            <summary>
             A static factory method to construct a new search builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Highlight">
            <summary>
            A static factory method to construct new search highlights.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Query(Nest.FactoryDsl.Query.IQueryBuilder)">
            <summary>
            Constructs a new search source builder with a search query.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Query(System.Byte[])">
            <summary>
            Constructs a new search source builder with a raw search query.
            </summary>
            <param name="queryBinary"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Query(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructs a new search source builder with a raw search query.
            </summary>
            <param name="queryBinary"></param>
            <param name="queryBinaryOffset"></param>
            <param name="queryBinaryLength"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Query(System.String)">
            <summary>
            Constructs a new search source builder with a raw search query.
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Filter(System.String)">
            <summary>
            Sets a filter on the query executed that only applies to the search query
            (and not facets for example). 
            </summary>
            <param name="filterString"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Filter(System.Byte[])">
            <summary>
            Sets a filter on the query executed that only applies to the search query
            (and not facets for example). 
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Filter(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets a filter on the query executed that only applies to the search query
            (and not facets for example).
            </summary>
            <param name="filterBinary"></param>
            <param name="filterBinaryOffset"></param>
            <param name="filterBinaryLength"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.From(System.Int32)">
            <summary>
            From index to start the search from. Defaults to <tt>0</tt>.
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Size(System.Int32)">
            <summary>
            The number of search hits to return. Defaults to <tt>10</tt>.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.MinScore(System.Single)">
            <summary>
            Sets the minimum score below which docs will be filtered out.
            </summary>
            <param name="minScore"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Explain(System.Boolean)">
            <summary>
            Should each {@link org.elasticsearch.search.SearchHit} be returned with an
            explanation of the hit (ranking).
            </summary>
            <param name="explain"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Version(System.Boolean)">
            <summary>
            Should each {@link org.elasticsearch.search.SearchHit} be returned with a version
            associated with it.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Sort(System.String,Nest.SortOrder)">
            <summary>
            Adds a sort against the given field name and the sort ordering.
            </summary>
            <param name="name">The name of the field</param>
            <param name="order">The sort ordering</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Sort(System.String)">
            <summary>
            Add a sort against the given field name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Sort(Nest.FactoryDsl.Sort.ISortBuilder)">
            <summary>
            Adds a sort builder.
            </summary>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.TrackScores(System.Boolean)">
            <summary>
            Applies when sorting, and controls if scores will be tracked as well. Defaults to
            <tt>false</tt>.
            </summary>
            <param name="trackScores"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Facet(Nest.FactoryDsl.Facet.AbstractFacetBuilder)">
            <summary>
            Add a facet to perform as part of the search.
            </summary>
            <param name="facet"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Facets(System.Byte[])">
            <summary>
            Sets raw (json) facets.
            </summary>
            <param name="facetsBinary"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Facets(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets raw (json) facets.
            </summary>
            <param name="facetsBinary"></param>
            <param name="facetBinaryOffset"></param>
            <param name="facetBinaryLength"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Highlighter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Highlight(Nest.FactoryDsl.HighlightBuilder)">
            <summary>
            Adds highlight to perform as part of the search.
            </summary>
            <param name="highlight"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.NoFields">
            <summary>
            Sets no fields to be loaded, resulting in only id and type to be returned per field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Fields(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the fields to load and return as part of the search request. If none are specified,
            the source of the document will be returned.
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Fields(System.String[])">
            <summary>
            Sets the fields to load and return as part of the search request. If none are specified,
            the source of the document will be returned.
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Field(System.String)">
            <summary>
            Adds a field to load and return (note, it must be stored) as part of the search request.
            If none are specified, the source of the document will be return.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.ScriptField(System.String,System.String)">
            <summary>
            Adds a script field under the given name with the provided script.
            </summary>
            <param name="name">The name of the field</param>
            <param name="script">The script</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.ScriptField(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds a script field.
            </summary>
            <param name="name">The name of the field</param>
            <param name="script">The script to execute</param>
            <param name="params">The script parameters</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.ScriptField(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds a script field.
            </summary>
            <param name="name">The name of the field</param>
            <param name="lang">The language of the script</param>
            <param name="script">The script to execute</param>
            <param name="params">The script parameters (can be <tt>null</tt>)</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.IndexBoost(System.String,System.Single)">
            <summary>
            Sets the boost a specific index will receive when the query is executeed against it.
            </summary>
            <param name="index">The index to apply the boost against</param>
            <param name="indexBoost">The boost to apply to the index</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SearchBuilder.Stats(System.String[])">
            <summary>
            The stats groups this request will be aggregated under.
            </summary>
            <param name="statsGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SortFactory.ScoreSort">
            <summary>
            Constructs a new score sort.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SortFactory.FieldSort(System.String)">
            <summary>
            Constructs a new field based sort.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SortFactory.ScriptSort(System.String,System.String)">
            <summary>
            Constructs a new script based sort.
            </summary>
            <param name="script">The script to use</param>
            <param name="type">The type, can either be "string" or "number"</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.SortFactory.GeoDistanceSort(System.String)">
            <summary>
            A geo distance based sort.
            </summary>
            <param name="fieldName">The geo point like field name.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.ISortBuilder.Order(Nest.SortOrder)">
            <summary>
            The order of sorting. Defaults to {@link SortOrder#ASC}.
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.ISortBuilder.Missing(System.Object)">
            <summary>
            Sets the value when a field is missing in a doc. Can also be set to <tt>_last</tt> or
            <tt>_first</tt> to sort missing last or first respectively.
            </summary>
            <param name="missing"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.FieldSortBuilder.IgnoreUnmapped(System.Boolean)">
            <summary>
            Sets if the field does not exists in the index, it should be ignored and not sorted by or not. Defaults
            to <tt>false</tt> (not ignoring).
            </summary>
            <param name="ignoreUnmapped"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Sort.GeoDistanceSortBuilder">
            <summary>
            A geo distance based sorting on a geo point like field.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.GeoDistanceSortBuilder.#ctor(System.String)">
            <summary>
            Constructs a new distance based sort on a geo point like field.
            </summary>
            <param name="fieldName">The geo point like field name.</param>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.GeoDistanceSortBuilder.Point(System.Double,System.Double)">
            <summary>
            The point to create the range distance facets from.
            </summary>
            <param name="lat">Latitude.</param>
            <param name="lon">Longitude</param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.GeoDistanceSortBuilder.Geohash(System.String)">
            <summary>
            The geohash of the geo point to create the range distance facets from.
            </summary>
            <param name="geohash"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.GeoDistanceSortBuilder.GeoDistance(Nest.GeoDistance)">
            <summary>
            The geo distance type used to compute the distance.
            </summary>
            <param name="geoDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.GeoDistanceSortBuilder.Unit(Nest.DistanceUnit)">
            <summary>
            The distance unit to use. Defaults to KILOMETERS.
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.GeoDistanceSortBuilder.Order(Nest.SortOrder)">
            <summary>
            The order of sorting. Defaults to ASC.
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.GeoDistanceSortBuilder.Missing(System.Object)">
            <summary>
            Not relevant.
            </summary>
            <param name="missing"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Sort.ScoreSortBuilder">
            <summary>
            A sort builder allowing to sort by score.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.ScoreSortBuilder.Order(Nest.SortOrder)">
            <summary>
            The order of sort scoring. By default, its DESC.
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="T:Nest.FactoryDsl.Sort.ScriptSortBuilder">
            <summary>
            Script sort builder allows to sort based on a custom script expression.
            </summary>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.ScriptSortBuilder.#ctor(System.String,System.String)">
            <summary>
            Constructs a script sort builder with the script and the type.
            </summary>
            <param name="script">The script to use.</param>
            <param name="type">The type, can either be "string" or "number".</param>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.ScriptSortBuilder.Param(System.String,System.Object)">
            <summary>
             A parameter that will be passed to the script.
             </summary>
             <param name="name">The name of the script parameter.</param>
             <param name="value">The value of the script parameter.</param>
             <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.ScriptSortBuilder.Lang(System.String)">
            <summary>
            The language of the script.
            </summary>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.ScriptSortBuilder.Order(Nest.SortOrder)">
            <summary>
            Sets the sort order.
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Nest.FactoryDsl.Sort.ScriptSortBuilder.Missing(System.Object)">
            <summary>
            Not really relevant.
            </summary>
            <param name="missing"></param>
            <returns></returns>
        </member>
        <member name="F:Nest.DateRounding.Floor">
            <summary>
            (the default), rounds to the lowest whole unit of this field.
            </summary>
        </member>
        <member name="F:Nest.DateRounding.Ceiling">
            <summary>
            Rounds to the highest whole unit of this field.
            </summary>
        </member>
        <member name="F:Nest.DateRounding.Half_Floor">
            <summary>
             Round to the nearest whole unit of this field. If the given millisecond value is closer to the floor or is exactly halfway, this function behaves like floor. If the millisecond value is closer to the ceiling, this function behaves like ceiling.
            </summary>
        </member>
        <member name="F:Nest.DateRounding.Half_Ceiling">
            <summary>
            Round to the nearest whole unit of this field. If the given millisecond value is closer to the floor, this function behaves like floor. If the millisecond value is closer to the ceiling or is exactly halfway, this function behaves like ceiling.
            </summary>
        </member>
        <member name="F:Nest.DateRounding.Half_Even">
            <summary>
            Round to the nearest whole unit of this field. If the given millisecond value is closer to the floor, this function behaves like floor. If the millisecond value is closer to the ceiling, this function behaves like ceiling. If the millisecond value is exactly halfway between the floor and ceiling, the ceiling is chosen over the floor only if it makes this field’s value even.
            </summary>
        </member>
        <member name="T:Nest.ScriptFilterDescriptor">
            <summary>
            A filter allowing to define scripts as filters.
            Ex: "doc['num1'].value > 1"
            </summary>
        </member>
        <member name="M:Nest.ScriptFilterDescriptor.Script(System.String)">
            <summary>
            Filter script.
            </summary>
            <param name="script">script</param>
            <returns>this</returns>
        </member>
        <member name="M:Nest.ScriptFilterDescriptor.Params(System.Func{Nest.FluentDictionary{System.String,System.Object},Nest.FluentDictionary{System.String,System.Object}})">
            <summary>
            Scripts are compiled and cached for faster execution.
            If the same script can be used, just with different parameters provider,
            it is preferable to use the ability to pass parameters to the script itself.
            Ex:
            	Script: "doc['num1'].value > param1"
            	param: "param1" = 5
            </summary>
            <param name="paramDictionary">param</param>
            <returns>this</returns>
        </member>
        <member name="M:Nest.ScriptFilterDescriptor.Lang(Nest.Lang)">
            <summary>
            Language of script.
            </summary>
            <param name="lang">language</param>
            <returns>this</returns>
        </member>
        <member name="T:Nest.NumericRangeFilterDescriptor`1">
            <summary>
            Filters documents with fields that have values within a certain numeric range. Similar to range filter, except that it works only with numeric values
            </summary>
            <typeparam name="T">Type of document</typeparam>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.FromExclusive">
            <summary>
            Forces the 'From()' to be exclusive (which is inclusive by default).
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.ToExclusive">
            <summary>
            Forces the 'To()' to be exclusive (which is inclusive by default).
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.To(System.Nullable{System.Int32})">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.From(System.Nullable{System.Int32})">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.Greater(System.Nullable{System.Int32})">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.GreaterOrEquals(System.Nullable{System.Int32})">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.Lower(System.Nullable{System.Int32})">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.LowerOrEquals(System.Nullable{System.Int32})">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.To(System.Nullable{System.Double})">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.From(System.Nullable{System.Double})">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.Greater(System.Nullable{System.Double})">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.GreaterOrEquals(System.Nullable{System.Double})">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.Lower(System.Nullable{System.Double})">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.LowerOrEquals(System.Nullable{System.Double})">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.To(System.String)">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.From(System.String)">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.Greater(System.String)">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.GreaterOrEquals(System.String)">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.Lower(System.String)">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.LowerOrEquals(System.String)">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.To(System.Nullable{System.DateTime},System.String)">
            <summary>
            The upper bound. Defaults to unbounded.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.From(System.Nullable{System.DateTime},System.String)">
            <summary>
            The lower bound. Defaults to start from the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.Greater(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting from and include_lower to false.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.GreaterOrEquals(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting from and include_lower to true.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.Lower(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting to and include_upper to false.
            </summary>
        </member>
        <member name="M:Nest.NumericRangeFilterDescriptor`1.LowerOrEquals(System.Nullable{System.DateTime},System.String)">
            <summary>
            Same as setting to and include_upper to true.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Indices(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The indices to execute the search on. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Index(System.String)">
            <summary>
            The index to execute the search on. Defaults to the default index
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Types(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The types to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Types(System.String[])">
            <summary>
            The types to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Types(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            The types to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Types(System.Type[])">
            <summary>
            The types to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Type(System.String)">
            <summary>
            The type to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Type(System.Type)">
            <summary>
            The type to execute the search on. Defaults to the inferred typename of T 
            unless T is dynamic then a type (or AllTypes()) MUST be specified.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.AllIndices">
            <summary>
            Execute search over all indices
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.AllTypes">
            <summary>
            Execute search over all types
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Routing(System.String)">
            <summary>
            When executing a search, it will be broadcasted to all the index/indices shards (round robin between replicas).
            Which shards will be searched on can be controlled by providing the routing parameter.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SearchType(Nest.SearchType)">
            <summary>
            controls how the distributed search behaves. http://www.elasticsearch.org/guide/reference/api/search/search-type.html
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Scroll(System.String)">
            <summary>
            A search request can be scrolled by specifying the scroll parameter. The scroll parameter is a time value parameter (for example: scroll=5m), indicating for how long the nodes that participate in the search will maintain relevant resources in order to continue and support it. This is very similar in its idea to opening a cursor against a database.
            </summary>
            <param name="scrollTime">The scroll parameter is a time value parameter (for example: scroll=5m)</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nest.SearchDescriptor`1.Strict(System.Boolean)" -->
        <member name="M:Nest.SearchDescriptor`1.Size(System.Int32)">
            <summary>
            The number of hits to return. Defaults to 10. When using scroll search type 
            size is actually multiplied by the number of shards!
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Take(System.Int32)">
            <summary>
            The number of hits to return. Defaults to 10.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.From(System.Int32)">
            <summary>
            The starting from index of the hits to return. Defaults to 0.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Skip(System.Int32)">
            <summary>
            The starting from index of the hits to return. Defaults to 0.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Timeout(System.String)">
            <summary>
            A search timeout, bounding the search request to be executed within the 
            specified time value and bail with the hits accumulated up
            to that point when expired. Defaults to no timeout.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Explain(System.Boolean)">
            <summary>
            Enables explanation for each hit on how its score was computed. 
            (Use .DocumentsWithMetaData on the return results)
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Version(System.Boolean)">
            <summary>
            Returns a version for each search hit. (Use .DocumentsWithMetaData on the return results)
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.TrackScores(System.Boolean)">
            <summary>
            Make sure we keep calculating score even if we are sorting on a field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.MinScore(System.Double)">
            <summary>
            Allows to filter out documents based on a minimum score:
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Preference(System.String)">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            Custom (string) value: A custom value will be used to guarantee that the same shards
            will be used for the same custom value. This can help with “jumping values” 
            when hitting different shards in different refresh states. 
            A sample value can be something like the web session id, or the user name.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.ExecuteOnPrimary">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            The operation will go and be executed only on the primary shards.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.ExecuteOnLocalShard">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            The operation will prefer to be executed on a local allocated shard is possible.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.ExecuteOnNode(System.String)">
            <summary>
            <para>
            Controls a preference of which shard replicas to execute the search request on. 
            By default, the operation is randomized between the each shard replicas.
            </para>
            <para>
            Restricts the search to execute only on a node with the provided node id
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.IndicesBoost(System.Func{Nest.FluentDictionary{System.String,System.Double},Nest.FluentDictionary{System.String,System.Double}})">
            <summary>
            Allows to configure different boost level per index when searching across 
            more than one indices. This is very handy when hits coming from one index
            matter more than hits coming from another index (think social graph where each user has an index).
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Fields(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Fields(System.String[])">
            <summary>
            Allows to selectively load specific fields for each document 
            represented by a search hit. Defaults to load the internal _source field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortAscending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort ascending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort descending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortAscending(System.String)">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort ascending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortDescending(System.String)">
            <summary>
            <para>Allows to add one or more sort on specific fields. Each sort can be reversed as well.
            The sort is defined on a per field level, with special field name for _score to sort by score.
            </para>
            <para>
            Sort descending.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Sort(System.Func{Nest.DSL.Descriptors.SortDescriptor{`0},Nest.DSL.Descriptors.SortDescriptor{`0}})">
            <summary>
            <para>Sort() allows you to fully describe your sort unlike the SortAscending and SortDescending aliases.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortGeoDistance(System.Func{Nest.DSL.Descriptors.SortGeoDistanceDescriptor{`0},Nest.DSL.Descriptors.SortGeoDistanceDescriptor{`0}})">
            <summary>
            <para>SortGeoDistance() allows you to sort by a distance from a geo point.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.SortScript(System.Func{Nest.DSL.Descriptors.SortScriptDescriptor{`0},Nest.DSL.Descriptors.SortScriptDescriptor{`0}})">
            <summary>
            <para>SortScript() allows you to sort by a distance from a geo point.
            </para>
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetTerm(System.String,System.Func{Nest.TermFacetDescriptor{`0},Nest.TermFacetDescriptor{`0}})">
            <summary>
            Allow to specify field facets that return the N most frequent terms.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetTerm(System.Func{Nest.TermFacetDescriptor{`0},Nest.TermFacetDescriptor{`0}},System.String)">
            <summary>
            Allow to specify field facets that return the N most frequent terms.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetRange``1(System.String,System.Func{Nest.RangeFacetDescriptor{`0,``0},Nest.RangeFacetDescriptor{`0,``0}})">
            <summary>
            range facet allow to specify a set of ranges and get both the number of docs (count) 
            that fall within each range, and aggregated data either based on the field, or using another field
            </summary>
            <typeparam name="K">struct, (int, double, string, DateTime)</typeparam>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetRange``1(System.Func{Nest.RangeFacetDescriptor{`0,``0},Nest.RangeFacetDescriptor{`0,``0}},System.String)">
            <summary>
            range facet allow to specify a set of ranges and get both the number of docs (count) 
            that fall within each range, and aggregated data either based on the field, or using another field
            </summary>
            <typeparam name="K">struct, (int, double, string, DateTime)</typeparam>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetHistogram(System.String,System.Func{Nest.HistogramFacetDescriptor{`0},Nest.HistogramFacetDescriptor{`0}})">
            <summary>
            The histogram facet works with numeric data by building a histogram across intervals 
            of the field values. Each value is “rounded” into an interval (or placed in a bucket), 
            and statistics are provided per interval/bucket (count and total). 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetHistogram(System.Func{Nest.HistogramFacetDescriptor{`0},Nest.HistogramFacetDescriptor{`0}},System.String)">
            <summary>
            The histogram facet works with numeric data by building a histogram across intervals 
            of the field values. Each value is “rounded” into an interval (or placed in a bucket), 
            and statistics are provided per interval/bucket (count and total). 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetDateHistogram(System.String,System.Func{Nest.DateHistogramFacetDescriptor{`0},Nest.DateHistogramFacetDescriptor{`0}})">
            <summary>
            A specific histogram facet that can work with date field types enhancing it over the regular histogram facet.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetDateHistogram(System.Func{Nest.DateHistogramFacetDescriptor{`0},Nest.DateHistogramFacetDescriptor{`0}},System.String)">
            <summary>
            A specific histogram facet that can work with date field types enhancing it over the regular histogram facet.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetStatistical(System.String,System.Func{Nest.StatisticalFacetDescriptor{`0},Nest.StatisticalFacetDescriptor{`0}})">
            <summary>
            Statistical facet allows to compute statistical data on a numeric fields. 
            The statistical data include count, total, sum of squares, 
            mean (average), minimum, maximum, variance, and standard deviation. 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetStatistical(System.Func{Nest.StatisticalFacetDescriptor{`0},Nest.StatisticalFacetDescriptor{`0}},System.String)">
            <summary>
            Statistical facet allows to compute statistical data on a numeric fields. 
            The statistical data include count, total, sum of squares, 
            mean (average), minimum, maximum, variance, and standard deviation. 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetTermsStats(System.String,System.Func{Nest.TermsStatsFacetDescriptor{`0},Nest.TermsStatsFacetDescriptor{`0}})">
            <summary>
            The terms_stats facet combines both the terms and statistical allowing 
            to compute stats computed on a field, per term value driven by another field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetTermsStats(System.Func{Nest.TermsStatsFacetDescriptor{`0},Nest.TermsStatsFacetDescriptor{`0}},System.String)">
            <summary>
            The terms_stats facet combines both the terms and statistical allowing 
            to compute stats computed on a field, per term value driven by another field.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetGeoDistance(System.String,System.Func{Nest.GeoDistanceFacetDescriptor{`0},Nest.GeoDistanceFacetDescriptor{`0}})">
            <summary>
            The geo_distance facet is a facet providing information for ranges of distances
            from a provided geo_point including count of the number of hits that fall 
            within each range, and aggregation information (like total).
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetGeoDistance(System.Func{Nest.GeoDistanceFacetDescriptor{`0},Nest.GeoDistanceFacetDescriptor{`0}},System.String)">
            <summary>
            The geo_distance facet is a facet providing information for ranges of distances
            from a provided geo_point including count of the number of hits that fall 
            within each range, and aggregation information (like total).
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetQuery(System.String,System.Func{Nest.QueryDescriptor{`0},Nest.BaseQuery},System.Nullable{System.Boolean})">
            <summary>
            A facet query allows to return a count of the hits matching 
            the facet query. The query itself can be expressed using the Query DSL.
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FacetFilter(System.String,System.Func{Nest.FilterDescriptor{`0},Nest.BaseFilter})">
            <summary>
            A filter facet (not to be confused with a facet filter) allows you to return a count of the h
            its matching the filter. The filter itself can be expressed using the Query DSL.
            Note, filter facet filters are faster than query facet when using native filters (non query wrapper ones).
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Query(System.Func{Nest.QueryDescriptor{`0},Nest.BaseQuery})">
            <summary>
            Describe the query to perform using a query descriptor lambda
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Query(Nest.BaseQuery)">
            <summary>
            Describe the query to perform using the static Query class
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.QueryString(System.String)">
            <summary>
            Shortcut to .Query(q=>q.QueryString(qs=>qs.Query("string"))
            Does a match_all if the userInput string is null or empty;
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.QueryRaw(System.String)">
            <summary>
            Describe the query to perform as a raw json string
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Filter(System.Func{Nest.FilterDescriptor{`0},Nest.BaseFilter})">
            <summary>
            Filter search using a filter descriptor lambda
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Filter(Nest.BaseFilter)">
            <summary>
            Filter search
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.FilterRaw(System.String)">
            <summary>
            Filter search using a raw json string
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.Highlight(System.Action{Nest.HighlightDescriptor{`0}})">
            <summary>
            Allow to highlight search results on one or more fields. The implementation uses the either lucene fast-vector-highlighter or highlighter. 
            </summary>
        </member>
        <member name="M:Nest.SearchDescriptor`1.MatchAll">
            <summary>
            Shorthand for a match_all query without having to specify .Query(q=>q.MatchAll())
            </summary>
        </member>
        <member name="P:Nest.SearchDescriptor`1._Strict">
            <summary>
            Whiter conditionless queries are allowed or not
            </summary>
        </member>
        <member name="F:Nest.ConnectionErrorType.Uncaught">
            <summary>
            The error was due to an uncaught exception in the client code
            </summary>
        </member>
        <member name="F:Nest.ConnectionErrorType.Server">
            <summary>
            The error was due to an error thrown by Elasticsearch
            </summary>
        </member>
        <member name="M:Nest.ConnectionSettings.#ctor(System.Uri)">
            <summary>
            Instantiate a connectionsettings object to tell the client where and how to connect to elasticsearch
            </summary>
            <param name="uri">A Uri to describe the elasticsearch endpoint</param>
        </member>
        <member name="M:Nest.ConnectionSettings.#ctor(System.Uri,System.Int32)">
            <summary>
            Instantiate a connectionsettings object to tell the client where and how to connect to elasticsearch
            </summary>
            <param name="uri">A Uri to describe the elasticsearch endpoint</param>
            <param name="timeout">time out in milliseconds</param>
        </member>
        <member name="M:Nest.ConnectionSettings.#ctor(System.Uri,System.Int32,System.String,System.String,System.String)">
            <summary>
            Instantiate a connectionsettings object to tell the client where and how to connect to elasticsearch
            using a proxy
            </summary>
            <param name="uri">A Uri to describe the elasticsearch endpoint</param>
            <param name="timeout">time out in milliseconds</param>
            <param name="proxyAddress">proxy address</param>
            <param name="username">proxy username</param>
            <param name="password">proxy password</param>
        </member>
        <member name="M:Nest.ConnectionSettings.#ctor(System.String,System.Int32)">
            <summary>
            Instantiate a connectionsettings object to tell the client where and how to connect to elasticsearch
            </summary>
            <param name="host">host (sans http(s)://), use the Uri constructor overload for more control</param>
            <param name="port">port of the host (elasticsearch defaults on 9200)</param>
        </member>
        <member name="M:Nest.ConnectionSettings.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Instantiate a connectionsettings object to tell the client where and how to connect to elasticsearch
            </summary>
            <param name="host">host (sans http(s)://), use the Uri constructor overload for more control</param>
            <param name="port">port of the host (elasticsearch defaults on 9200)</param>
            <param name="timeout">time out in milliseconds</param>
        </member>
        <member name="M:Nest.ConnectionSettings.#ctor(System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Instantiate a connectionsettings object to tell the client where and how to connect to elasticsearch
            </summary>
            <param name="host">host (sans http(s)://), use the Uri constructor overload for more control</param>
            <param name="port">port of the host (elasticsearch defaults on 9200)</param>
            <param name="timeout">time out in milliseconds</param>
            <param name="proxyAddress">proxy address</param>
            <param name="username">proxy username</param>
            <param name="password">proxy password</param>
        </member>
        <member name="M:Nest.ConnectionSettings.SetDefaultIndex(System.String)">
            <summary>
            Index to default to when no index is specified.
            </summary>
            <param name="defaultIndex">When null/empty/not set might throw NRE later on
            when not specifying index explicitly while indexing.
            </param>
            <returns></returns>
        </member>
        <member name="M:Nest.ConnectionSettings.SetMaximumAsyncConnections(System.Int32)">
            <summary>
            Semaphore asynchronous connections automatically by giving
            it a maximum concurrent connections. Great to prevent 
            out of memory exceptions
            </summary>
            <param name="maximum">defaults to 20</param>
            <returns></returns>
        </member>
        <member name="M:Nest.ConnectionSettings.SetTimeout(System.Int32)">
            <summary>
            Timeout in milliseconds when the .NET webrquest should abort the request, note that you can set this to a high value here,
            and specify the timeout in various calls on Elasticsearch's side.
            </summary>
            <param name="timeout">time out in milliseconds</param>
        </member>
        <member name="P:Nest.ElasticPropertyAttribute.NumericType">
            <summary>
            Defaults to float so be sure to set this correctly!
            </summary>
        </member>
        <member name="P:Nest.ElasticPropertyAttribute.DateFormat">
            <summary>
            http://www.elasticsearch.org/guide/reference/mapping/date-format.html
            </summary>
        </member>
        <member name="T:Nest.ElasticMap">
            <summary>
            Static helper to help create resusable RootObjectMappings
            </summary>
        </member>
        <member name="T:Nest.GenericMapping">
            <summary>
            Sometimes you need a generic type mapping, i.e when using dynamic templates 
            in order to specify "{dynamic_template}" the type, or if you have some plugin that exposes a new type.
            </summary>
        </member>
        <member name="P:Nest.GenericMapping.IndexName">
            <summary>
            The name of the field that will be stored in the index. Defaults to the property/field name.
            </summary>
        </member>
        <member name="P:Nest.IndexParameters.Timeout">
            <summary>
            string because you can pass 5m, or 1h to ES
            </summary>
        </member>
        <member name="P:Nest.QueryResponse`1.ScrollId">
            <summary>
            Only set when search type = scan and scroll specified
            </summary>
        </member>
        <member name="T:Nest.CustomAnalyzer">
            <summary>
            An analyzer of type custom that allows to combine a Tokenizer with zero or more Token Filters, and zero or more Char Filters. 
            <para>The custom analyzer accepts a logical/registered name of the tokenizer to use, and a list of logical/registered names of token filters.</para>
            </summary>
        </member>
        <member name="T:Nest.IndexSettings">
            <summary>
            Writing these uses a custom converter that ignores the json props
            </summary>
        </member>
        <member name="T:Nest.SnowballAnalyzer">
            <summary>
            An analyzer of type snowball that uses the standard tokenizer, with standard filter, lowercase filter, stop filter, and snowball filter.
            <para> The Snowball Analyzer is a stemming analyzer from Lucene that is originally based on the snowball project from snowball.tartarus.org.</para>
            </summary>
        </member>
        <member name="T:Nest.ShingleTokenFilter">
            <summary>
            A token filter of type shingle that constructs shingles (token n-grams) from a token stream. 
            <para>In other words, it creates combinations of tokens as a single token. </para>
            </summary>
        </member>
        <member name="P:Nest.ShingleTokenFilter.MinShingleSize">
            <summary>
            The minimum shingle size. Defaults to 2.
            </summary>
        </member>
        <member name="P:Nest.ShingleTokenFilter.MaxShingleSize">
            <summary>
            The maximum shingle size. Defaults to 2.
            </summary>
        </member>
        <member name="P:Nest.ShingleTokenFilter.OutputUnigrams">
            <summary>
            If true the output will contain the input tokens (unigrams) as well as the shingles. Defaults to true.
            </summary>
        </member>
        <member name="P:Nest.ShingleTokenFilter.OutputUnigramsIfNoShingles">
            <summary>
            If output_unigrams is false the output will contain the input tokens (unigrams) if no shingles are available. 
            <para>Note if output_unigrams is set to true this setting has no effect. Defaults to false.</para>
            </summary>
        </member>
        <member name="P:Nest.ShingleTokenFilter.TokenSeparator">
            <summary>
            The string to use when joining adjacent tokens to form a shingle. Defaults to " ".
            </summary>
        </member>
        <member name="T:Nest.Resolvers.ExpressionVisitor">
            <summary>
            This comes from Matt Warren's sample:
            http://blogs.msdn.com/mattwar/archive/2007/07/31/linq-building-an-iqueryable-provider-part-ii.aspx
            </summary>
        </member>
        <member name="T:Nest.Resolvers.Inflector">
            <summary>
            Pluralizes or singularizes words.
            </summary>
        </member>
        <member name="M:Nest.Resolvers.Inflector.#cctor">
            <summary>
            Initializes the <see cref="T:Nest.Resolvers.Inflector"/> class.
            </summary>
        </member>
        <member name="M:Nest.Resolvers.Inflector.AddIrregularRule(System.String,System.String)">
            <summary>
            Adds the irregular rule.
            </summary>
            <param name="singular">The singular.</param>
            <param name="plural">The plural.</param>
        </member>
        <member name="M:Nest.Resolvers.Inflector.AddUnknownCountRule(System.String)">
            <summary>
            Adds the unknown count rule.
            </summary>
            <param name="word">The word.</param>
        </member>
        <member name="M:Nest.Resolvers.Inflector.AddPluralRule(System.String,System.String)">
            <summary>
            Adds the plural rule.
            </summary>
            <param name="rule">The rule.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:Nest.Resolvers.Inflector.AddSingularRule(System.String,System.String)">
            <summary>
            Adds the singular rule.
            </summary>
            <param name="rule">The rule.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:Nest.Resolvers.Inflector.MakePlural(System.String)">
            <summary>
            Makes the plural.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.Resolvers.Inflector.MakeSingular(System.String)">
            <summary>
            Makes the singular.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Nest.Resolvers.Inflector.ApplyRules(System.Collections.Generic.IList{Nest.Resolvers.Inflector.InflectorRule},System.String)">
            <summary>
            Applies the rules.
            </summary>
            <param name="rules">The rules.</param>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="T:Nest.Resolvers.Inflector.InflectorRule">
            <summary>
            Summary for the InflectorRule class
            </summary>
        </member>
        <member name="M:Nest.Resolvers.Inflector.InflectorRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nest.Resolvers.Inflector.InflectorRule"/> class.
            </summary>
            <param name="regexPattern">The regex pattern.</param>
            <param name="replacementText">The replacement text.</param>
        </member>
        <member name="M:Nest.Resolvers.Inflector.InflectorRule.Apply(System.String)">
            <summary>
            Applies the tule to the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="T:Nest.FieldType">
            <summary>
            Define the type of field content.
            </summary>
        </member>
        <member name="F:Nest.FieldType.none">
            <summary>
            Default. Will be defined by the type of property return.
            </summary>
        </member>
        <member name="F:Nest.FieldType.geo_point">
            <summary>
            Geo based points.
            </summary>
        </member>
        <member name="F:Nest.FieldType.attachment">
            <summary>
            The attachment type allows to index different “attachment” type field (encoded as base64), for example, microsoft office formats, open document formats, ePub, HTML...
            </summary>
        </member>
        <member name="F:Nest.FieldType.ip">
            <summary>
            An ip mapping type allows to store ipv4 addresses in a numeric form allowing to easily sort, and range query it (using ip values).
            </summary>
        </member>
        <member name="F:Nest.FieldType.binary">
            <summary>
            The binary type is a base64 representation of binary data that can be stored in the index.
            </summary>
        </member>
        <member name="F:Nest.FieldType.string_type">
            <summary>
            Text based string type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.integer_type">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.long_type">
            <summary>
            Long type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.float_type">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.double_type">
            <summary>
            Double type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.date_type">
            <summary>
            Date type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.boolean_type">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.nested">
            <summary>
            Nested type.
            </summary>
        </member>
        <member name="F:Nest.FieldType.object">
            <summary>
            object type, no need to set this manually if its not a value type this will be set.
            Only set this if you need to force a value type to be mapped to an elasticsearch object type.
            </summary>
        </member>
        <member name="M:Nest.Resolvers.Writers.TypeMappingWriter.GetElasticSearchType(Nest.ElasticPropertyAttribute,System.Reflection.PropertyInfo)">
            <summary>
            Get the Elastic Search Field Type Related.
            </summary>
            <param name="att">ElasticPropertyAttribute</param>
            <param name="p">Property Field</param>
            <returns>String with the type name or null if can not be inferres</returns>
        </member>
        <member name="M:Nest.Resolvers.Writers.TypeMappingWriter.GetElasticSearchTypeFromFieldType(System.Nullable{Nest.FieldType})">
            <summary>
            Get the Elastic Search Field from a FieldType.
            </summary>
            <param name="fieldType">FieldType</param>
            <returns>String with the type name or null if can not be inferres</returns>
        </member>
        <member name="M:Nest.Resolvers.Writers.TypeMappingWriter.GetFieldTypeFromType(System.Type)">
            <summary>
            Inferes the FieldType from the type of the property.
            </summary>
            <param name="propertyType">Type of the property</param>
            <returns>FieldType or null if can not be inferred</returns>
        </member>
        <member name="T:Nest.StandardAnalyzer">
            <summary>
            An analyzer of type standard that is built of using Standard Tokenizer, with Standard Token Filter, Lower Case Token Filter, and Stop Token Filter.
            </summary>
        </member>
        <member name="P:Nest.StandardAnalyzer.StopWords">
            <summary>
            A list of stopword to initialize the stop filter with. Defaults to the english stop words.
            </summary>
        </member>
        <member name="P:Nest.StandardAnalyzer.MaxTokenLength">
            <summary>
            The maximum token length. If a token is seen that exceeds this length then it is discarded. Defaults to 255.
            </summary>
        </member>
        <member name="T:Nest.StopTokenFilter">
            <summary>
            A token filter of type stop that removes stop words from token streams.
            </summary>
        </member>
        <member name="T:Nest.WordDelimiterTokenFilter">
            <summary>
            Named word_delimiter, it Splits words into subwords and performs optional transformations on subword groups.
            </summary>
        </member>
    </members>
</doc>
